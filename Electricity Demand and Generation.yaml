schemaVersion: 3
meta:
  sourceVersionId: 678ae92e-ce64-423c-a1d3-da497cf761eb # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: The project pulls data from the EIA (US Energy Information Agency) API and generates charts of electricity generation and demand over a user-specified time period, in a given region, split by fuel types.
  projectId: ede39a0b-fd2b-4797-9189-cd550c1c5dd1 # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: Electricity Demand and Generation
  timezone: America/Los_Angeles
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status: null
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout: null
  publishedQueryCacheTimeout: null
  hexType: PROJECT
  allowExecutionReordering: true
  prerunApp: false
  cachePublishedAppState: true
  refreshStalePublishedApp: false
  autoRerunApp: true
projectAssets:
  dataConnections: []
  envVars: []
  secrets: []
sharedAssets:
  secrets: []
  vcsPackages: []
  dataConnections:
    - dataConnectionId: e8480949-7368-449c-b922-66d0c52bbad0 # Supabase (postgres)
  externalFileIntegrations: []
cells:
  - cellType: TEXT
    cellId: 46dcf741-4a4e-4b91-acb7-cbe1ec91694d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "Find the API documentation here: "
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: ""
                    - url: "https://www.eia.gov/opendata/browser/electricity/rto/daily-region-data "
                      type: a
                      children:
                        - text: "https://www.eia.gov/opendata/browser/electricity/rto/daily-region-data "
                    - text: ""
            - type: li
              children:
                - type: lic
                  children:
                    - text: ""
                    - url: https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48
                      type: a
                      children:
                        - text: https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48
                    - text: ""
  - cellType: TEXT
    cellId: bea360c9-60a0-4e53-9fb4-57639684cc6a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: Terminology
        - type: p
          children:
            - text: "We'll reference these terms later in the notebook, so it's important to understand them now:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Balancing authority (BA): "
                    - text: the organization in charge of ensuring electricity generation meets electricity demand in a given region. A BA performs it's own local electricity generation, and then either net imports or net exports energy to other connected BAs, depending on whether local electricity demand is larger or smaller than local electricity generation
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Grid mix:"
                    - text: " electricity generation breakdown by fuel type (e.g., coal, natural gas, solar, hydro, etc.)"
  - cellType: CODE
    cellId: b67999c4-053b-42d1-a665-c75331a02748 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Impor Packages
    config:
      source: |-
        import datetime
        import json
        import requests
        from IPython import display
        import pandas as pd
  - cellType: CODE
    cellId: 32544e70-7469-4aa1-954e-95f7a0d47fa7 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: EIA API key
    config:
      source: |-
        # EIA API - https://www.eia.gov/opendata/
        EIA_API_KEY = "Z1SiTSzQ2gYPesLe83qRYJEFW7PbMu7A7pVtibka"
        assert EIA_API_KEY != "", "You must set an EIA API key before continuing."
  - cellType: CODE
    cellId: d07c3045-4bca-47ea-8f76-2183a676d993 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Data access helper functions by Jaime Curtis and Jason Curtis
    config:
      source: |-
        # Credit:This code written by Jaime Curtis and Jason Curtis
        # Used with permission as part of Terra.do's Software for Climate Online Course (June 2024 Cohort) 
        # 
        # Helper functions you will use to fetch data from the EIA API
        # There are three types of data we're fetching:
        #  1. Generation by fuel type (Megawatt-hours): how much electricity is being generated by each fuel type
        #  2. Demand (Megawatt-hours): how much electricity is being consumed
        #  3. Interchange: how much electricity is being imported/exported from other balancing authorities

        default_end_date = datetime.date.today().isoformat()
        default_start_date = (datetime.date.today() - datetime.timedelta(days=(365*2))).isoformat()

        def get_eia_timeseries(
            url_segment,
            facets,
            value_column_name="value",
            # start_date=default_start_date,
            # end_date=default_end_date,
            # Hard code to easier evaluate seasonality
            start_date=datetime.date(2022, 6, 1).isoformat(),
            end_date=datetime.date(2024, 5, 31).isoformat(),
            start_page=0,
        ):
            """
            A generalized helper function to fetch data from the EIA API
            """

            max_row_count = 5000  # This is the maximum allowed per API call from the EIA
            api_url = f"https://api.eia.gov/v2/electricity/rto/{url_segment}/data/?api_key={EIA_API_KEY}"
            offset = start_page * max_row_count

            response_content = requests.get(
                api_url,
                headers={
                    "X-Params": json.dumps(
                        {
                            "frequency": "daily",
                            "data": ["value"],
                            "facets": dict(**{"timezone": ["Pacific"]}, **facets),
                            "start": start_date,
                            "end": end_date,
                            "sort": [{"column": "period", "direction": "desc"}],
                            "offset": offset,
                            "length": max_row_count,
                        }
                    )
                },
            ).json()

            # Sometimes EIA API responses are nested under a "response" key. Sometimes not ðŸ¤· :lol
            if "response" in response_content:
                response_content = response_content["response"]

            print(f"{len(response_content['data'])} rows fetched")

            # Convert the data to a Pandas DataFrame and clean it up for plotting & analysis.
            dataframe = pd.DataFrame(response_content["data"])
            # Add a more useful timestamp column
            dataframe["timestamp"] = dataframe["period"].apply(
                pd.to_datetime, format="%Y/%m/%dT%H"
            )
            # Clean up the "value" column-
            # EIA always sends the value we asked for in a column called "value"
            # Oddly, this is sometimes sent as a string though it should always be a number.
            # We convert its dtype and set the name to a more useful one
            eia_value_column_name = "value"
            processed_df = dataframe.astype({eia_value_column_name: float}).rename(
                columns={eia_value_column_name: value_column_name}
            )

            # Pagination logic
            rows_fetched = len(processed_df) + offset
            rows_total = int(response_content["total"])
            more_rows_needed = rows_fetched != rows_total
            if more_rows_needed:
                # Recursive call to get remaining rows
                additional_rows = get_eia_timeseries(
                    url_segment=url_segment,
                    facets=facets,
                    value_column_name=value_column_name,
                    start_date=start_date,
                    end_date=end_date,
                    start_page=start_page + 1,
                )
                return pd.concat([processed_df, additional_rows])
            else:
                return processed_df

        def get_eia_timeseries_for_co2_data(
            facets,
            value_column_name="value",
            # start_date=default_start_date,
            # end_date=default_end_date,
            start_page=0,
        ):
            """
            A generalized helper function to fetch data from the EIA API
            """

            max_row_count = 5000  # This is the maximum allowed per API call from the EIA
            api_url = f"https://api.eia.gov/v2/co2-emissions/co2-emissions-aggregates/data/?api_key={EIA_API_KEY}"
            offset = start_page * max_row_count

            response_content = requests.get(
                api_url,
                headers={
                    "X-Params": json.dumps(
                        {
                            "frequency": "annual",
                            "data": ["value"],
                            # "facets": dict(**{"timezone": ["Pacific"]}, **facets),
                            # "start": start_date,
                            # "end": end_date,
                            "sort": [{"column": "period", "direction": "desc"}],
                            "offset": offset,
                            "length": max_row_count,
                        }
                    )
                },
            ).json()

            # Sometimes EIA API responses are nested under a "response" key. Sometimes not ðŸ¤· :lol
            if "response" in response_content:
                response_content = response_content["response"]

            print(f"{len(response_content['data'])} rows fetched")

            # Convert the data to a Pandas DataFrame and clean it up for plotting & analysis.
            dataframe = pd.DataFrame(response_content["data"])
            # Add a more useful timestamp column
            dataframe["timestamp"] = dataframe["period"].apply(
                pd.to_datetime, format="%Y/%m/%dT%H"
            )
            # Clean up the "value" column-
            # EIA always sends the value we asked for in a column called "value"
            # Oddly, this is sometimes sent as a string though it should always be a number.
            # We convert its dtype and set the name to a more useful one
            eia_value_column_name = "value"
            processed_df = dataframe.astype({eia_value_column_name: float}).rename(
                columns={eia_value_column_name: value_column_name}
            )

            # Pagination logic
            rows_fetched = len(processed_df) + offset
            rows_total = int(response_content["total"])
            more_rows_needed = rows_fetched != rows_total
            if more_rows_needed:
                # Recursive call to get remaining rows
                additional_rows = get_eia_timeseries_for_co2_data(
                    # url_segment=url_segment,
                    facets=facets,
                    value_column_name=value_column_name,
                    # start_date=start_date,
                    # end_date=end_date,
                    start_page=start_page + 1,
                )
                return pd.concat([processed_df, additional_rows])
            else:
                return processed_df


        def get_eia_grid_mix_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity generation data by fuel type
            """
            return get_eia_timeseries(
                url_segment="daily-fuel-type-data",
                facets={"respondent": balancing_authorities},
                value_column_name="Generation (MWh)",
                **kwargs,
            )

        def get_eia_co2_emissions_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity generation data by co2 emissions
            """
            return get_eia_timeseries_for_co2_data(
                facets={"respondent": balancing_authorities},
                value_column_name="value",
                **kwargs,
            )

        def get_eia_net_demand_and_generation_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity demand data
            """
            return get_eia_timeseries(
                url_segment="daily-region-data",
                facets={
                    "respondent": balancing_authorities,
                    "type": ["D", "NG", "TI"],  # Filter out the "Demand forecast" (DF) type
                },
                value_column_name="Demand (MWh)",
                **kwargs,
            )


        def get_eia_interchange_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity interchange data (imports & exports from other utilities)
            """
            return get_eia_timeseries(
                url_segment="daily-interchange-data",
                facets={"toba": balancing_authorities},
                value_column_name=f"Interchange to local BA (MWh)",
                **kwargs,
            )
  - cellType: MARKDOWN
    cellId: adc2b436-7779-479e-8f79-ad3f3543af31 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Markdown 6
    config:
      source: |-
        Select your local Balancing Authority. 

        For more deatails on balancing authority, refer to EIA API docs: https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48
  - cellType: INPUT
    cellId: 402d2c5d-3a83-4b30-b9df-c335603ac524 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Select the Local BA
    config:
      inputType: DROPDOWN
      name: selected_local_BA
      outputType: STRING
      options:
        valueOptions:
          - YAD - Alcoa Power GeneratingInc. Yadkin Division
          - AZPS - Arizona Public Service Company
          - DEAA - Arlington ValleyLLC
          - AECI - Associated Electric CooperativeInc.
          - AVRN - Avangrid RenewablesLLC
          - AVA - Avista Corporation
          - BANC - Balancing Authority of Northern California
          - BPAT - Bonneville Power Administration
          - CISO - California Independent System Operator
          - HST - City of Homestead
          - TPWR - City of TacomaDepartment of Public UtilitiesLight Division
          - TAL - City of Tallahassee
          - SCEG - Dominion Energy South CarolinaInc.
          - DUK - Duke Energy Carolinas
          - FPC - Duke Energy FloridaInc.
          - CPLE - Duke Energy Progress East
          - CPLW - Duke Energy Progress West
          - EPE - El Paso Electric Company
          - EEI - Electric EnergyInc.
          - ERCO - Electric Reliability Council of TexasInc.
          - FMPP - Florida Municipal Power Pool
          - FPL - Florida Power & Light Co.
          - GVL - Gainesville Regional Utilities
          - GRMA - Gila River PowerLLC
          - GLHB - GridLiance
          - GRID - Gridforce Energy ManagementLLC
          - GRIF - Griffith EnergyLLC
          - ISNE - ISO New England
          - IPCO - Idaho Power Company
          - IID - Imperial Irrigation District
          - JEA - JEA
          - LGEE - Louisville Gas and Electric Company and Kentucky Utilities Company
          - LDWP - Los Angeles Department of Water and Power
          - MISO - Midcontinent Independent System OperatorInc.
          - GWA - NaturEner Power WatchLLC
          - WWA - NaturEner Wind WatchLLC
          - NEVP - Nevada Power Company
          - HGMA - New Harquahala Generating CompanyLLC
          - NYIS - New York Independent System Operator
          - NWMT - NorthWestern Corporation
          - OVEC - Ohio Valley Electric Corporation
          - PJM - PJM InterconnectionLLC
          - DOPD - PUD No. 1 of Douglas County
          - PACE - PacifiCorp East
          - PACW - PacifiCorp West
          - PGE - Portland General Electric Company
          - AEC - PowerSouth Energy Cooperative
          - PSCO - Public Service Company of Colorado
          - PNM - Public Service Company of New Mexico
          - CHPD - Public Utility District No. 1 of Chelan County
          - GCPD - Public Utility District No. 2 of Grant CountyWashington
          - PSEI - Puget Sound EnergyInc.
          - SRP - Salt River Project Agricultural Improvement and Power District
          - SCL - Seattle City Light
          - SEC - Seminole Electric Cooperative
          - SC - South Carolina Public Service Authority
          - SEPA - Southeastern Power Administration
          - SOCO - Southern Company Services Inc. Trans
          - SWPP - Southwest Power Pool
          - SPA - Southwestern Power Administration
          - TEC - Tampa Electric Company
          - TVA - Tennessee Valley Authority
          - TEPC - Tucson Electric Power
          - TIDC - Turlock Irrigation District
          - NSB - Utilities Commission of New Smyrna Beach
          - WALC - Western Area Power Administration Desert Southwest Region
          - WACM - Western Area Power Administration Rocky Mountain Region
          - WAUW - Western Area Power Administration Upper Great Plains West
      defaultValue: NYIS - New York Independent System Operator
  - cellType: CODE
    cellId: a825e967-77fe-420f-89ba-edcc460e4999 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Fetch data: local generation grid mix"
    config:
      source: |-
        
        # Parse selected Local BA
        def parse_BA(selected_BA):
            code, descrip = selected_BA.split(" - ", 1)
            return {"code": code, "descrip": descrip}

        local_BA = parse_BA(selected_local_BA)

        # Request and fetch electricity generation data from the EIA API 
        local_generation_grid_mix = get_eia_grid_mix_timeseries(
            [local_BA['code']]
            # [local_BA['code']],
            # start_date="2022-01-01",
            # end_date="2023-01-01"
        )

        local_generation_grid_mix
  - cellType: MARKDOWN
    cellId: 09bf6c45-8448-4285-9f75-1490a4b21d62 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Electricity Generation
    config:
      source: "# What is the grid mix for my local electricity?"
  - cellType: CHARTV2
    cellId: 365165b9-115d-4085-89c9-8991007569d4 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Local Electricity Generation and Grid Mix for Selected BA
    config:
      height: 424
      chartSpec:
        type: layered
        layers:
          - id: e66ed52b-79b6-42f5-a753-efe97886e6ca
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              timeUnit: yearmonthdatehours
              dataFrameColumn: timestamp
            series:
              - id: 4c080afe-51ab-4f35-bf94-96a4ec2b9e78
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Generation (MWh)
                colorDataFrameColumn: type-name
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: local_generation_grid_mix
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        NG: "#F58518"
        COL: "#4C78A8"
        OIL: "#E45756"
        OTH: "#72B7B2"
        SUN: "#54A24B"
        WAT: "#EECA3B"
        WND: "#B279A2"
        Coal: "#4C78A8"
        Wind: "#B279A2"
        Hydro: "#F58518"
        Other: "#72B7B2"
        Solar: "#EECA3B"
        Demand: "#F58518"
        Nuclear: "#54A24B"
        Unknown: "#FF9DA6"
        Petroleum: "#54A24B"
        Natural Gas: "#E45756"
        Natural gas: "#E45756"
        Net generation: "#E45756"
        Total interchange: "#72B7B2"
        Day-ahead demand forecast: "#4C78A8"
      resultVariable: filter_result_2
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: TEXT
    cellId: 63554235-feb9-428f-be5e-91217b13700d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "For many balancing authorities, much of the electricity needed to meet demand is actually imported from other balancing authorities. "
        - type: paragraph
          children:
            - text: In this next section, we are going to combine datasets of demand (local) and generation (local and imported) to get a true representation of the "grid mix" (breakdown by fuel type) of local energy consumed
  - cellType: TEXT
    cellId: ba0c3f00-2f31-4172-b59e-f793504a7f62 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: "Terminology: Demand, Net generation, and Total interchange"
        - type: paragraph
          children:
            - text: |
                First, more terminology (https://www.eia.gov/electricity/gridmonitor/about)
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Demand (D):"
                    - text: " energy consumed locally"
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Net generation (NG):"
                    - text: " energy generated locally"
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Total interchange (TI):"
                    - text: " net energy exported (positive means net outflow, negative means net inflow)"
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: "The balancing authority is responsible for balancing this equation:"
        - type: codeblock
          children:
            - bold: true
              text: Total interchange = Net generation - Demand
        - type: p
          children:
            - text: i.e. if local generation is larger than local demand, the BA is exporting electricity (positive total interchange). If local demand is larger than local generation, the BA is importing electricity (negative total interchange)
  - cellType: TEXT
    cellId: d76072fc-b05d-43c5-9933-38cc4692acc3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: The Plan
        - type: paragraph
          children:
            - text: "There are two paths to consider:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: Local BA is a net exporter of energy
                    - text: |-
                        
                        In this case, all electricity consumed locally comes from electricity generated locally, so the grid mix simply matches the local generation. This turns out to be a trivial sub-case of path #2
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: Local BA is a net importer of energy
                    - text: |-
                        
                        When the local BA is net importing energy, that energy might come from multiple other BAs, each of which has their own grid mix. Therefore, the grid mix of consumed electricity is a combination of local generation grid mix and imported generation grid mix
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "To get a true representation of the grid mix of local energy, we need to combine these pieces of data:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Demand, Net generation, and Total interchange for our LOCAL_BALANCING_AUTHORITY
            - type: li
              children:
                - type: lic
                  children:
                    - text: Interchange (quantity of imported energy) with each connected balancing authority
            - type: li
              children:
                - type: lic
                  children:
                    - text: Grid mix of imported energy from each connected balancing authority
  - cellType: CODE
    cellId: b2570797-eb5a-4d19-97b7-7451dd88c2b6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Combine: Energy consumed locally, broken down by source BA (local and imported)"
    config:
      source: |-
        # Credit: This code written by Jaime Curtis and Jason Curtis
        # Used with permission as part of Terra.do's Software for Climate Online Course (June 2024 Cohort) 

        # In the code below, we fetch the daily Demand (D), Net generation (NG), and Total interchange (TI) numbers for the LOCAL_BALANCING_AUTHORITY
        # You should see three rows for each date, one row each for TI, D, and NG.
        # You can spot check a given day to confirm that TI = NG - D
        demand_df = get_eia_net_demand_and_generation_timeseries([local_BA['code']])
        interchange_df = get_eia_interchange_timeseries([local_BA['code']])


        # How much energy is both generated and consumed locally
        def get_energy_generated_and_consumed_locally(df):
            demand_stats = df.groupby("type-name")["Demand (MWh)"].sum()
            # If local demand is smaller than net (local) generation, that means: amount generated and used locally == Demand (net export)
            # If local generation is smaller than local demand, that means: amount generated and used locally == Net generation (net import)
            # Therefore, the amount generated and used locally is the minimum of these two
            try:
                return min(demand_stats["Demand"], demand_stats["Net generation"])
            except KeyError:
                # Sometimes for a particular timestamp we're missing demand or net generation. Be conservative and set it to zero
                print(f'Warning - either Demand or Net generation is missing from this timestamp. Values found for "type-name": {list(demand_stats.index)}')
                return 0


        energy_generated_and_used_locally = demand_df.groupby("timestamp").apply(
            get_energy_generated_and_consumed_locally
        )

        consumed_locally_column_name = "Power consumed locally (MWh)"

        # How much energy is imported and then used locally, grouped by the source BA (i.e. the BA which generated the energy)
        energy_imported_then_consumed_locally_by_source_ba = (
            interchange_df.groupby(["timestamp", "fromba"])[
                "Interchange to local BA (MWh)"
            ].sum()
            # We're only interested in data points where energy is coming *in* to the local BA, i.e. where net export is negative
            # Therefore, ignore positive net exports
            .apply(lambda interchange: max(interchange, 0))
        )

        # Combine these two together to get all energy used locally, grouped by the source BA (both local and connected)
        energy_consumed_locally_by_source_ba = pd.concat(
            [
                energy_imported_then_consumed_locally_by_source_ba.rename(
                    consumed_locally_column_name
                ).reset_index("fromba"),
                pd.DataFrame(
                    {
                        "fromba": selected_local_BA,
                        consumed_locally_column_name: energy_generated_and_used_locally,
                    }
                ),
            ]
        ).reset_index()


        # Now that we know how much (if any) energy is imported by our local BA, and from which source BAs,
        # let's get a full breakdown of the grid mix (fuel types) for that imported energy

        # First, get a list of all source BAs: our local BA plus the ones we're importing from
        all_source_bas = energy_consumed_locally_by_source_ba["fromba"].unique().tolist()

        # Then, fetch the fuel type breakdowns for each of those BAs
        generation_types_by_ba = get_eia_grid_mix_timeseries(all_source_bas).rename(
            {"respondent": "fromba", "type-name": "generation_type"}, axis="columns"
        )


        # Combine Demand, Net generation, and Total interchange and Interchange (import or export) 
        #  The goal is to get a DataFrame of energy used at the local BA (in MWh), broken down by both
        #  * the BA that the energy came from, and 
        #  * the fuel type of that energy.
        # Combine the amount of imported energy from each source ba with grid mix for that source BA.
        # Power consumed locally from a (BA, fuel type) combination = 
        #    total power consumed locally from this source BA * (fuel type as a % of source BA's generation)
        # fuel type as a % of source BA's generation = 
        #    (total generation at source BA) / (total generation for this fuel type at this BA)


        total_generation_by_source_ba = generation_types_by_ba.groupby(["timestamp", "fromba"])[
            "Generation (MWh)"
        ].sum()

        generation_types_by_ba_with_totals = generation_types_by_ba.join(
            total_generation_by_source_ba,
            how="left",
            on=["timestamp", "fromba"],
            rsuffix=" Total",
        )
        generation_types_by_ba_with_totals["Generation (% of BA generation)"] = (
            generation_types_by_ba_with_totals["Generation (MWh)"]
            / generation_types_by_ba_with_totals["Generation (MWh) Total"]
        )
        generation_types_by_ba_with_totals_and_source_ba_breakdown = generation_types_by_ba_with_totals.merge(
            energy_consumed_locally_by_source_ba.rename(
                {"Power consumed locally (MWh)": "Power consumed locally from source BA (MWh)"},
                axis="columns",
            ),
            on=["timestamp", "fromba"],
        )
        full_df_reindexed = (
            generation_types_by_ba_with_totals_and_source_ba_breakdown.set_index(
                ["timestamp", "fromba", "generation_type"]
            )
        )
        usage_by_ba_and_generation_type = (
            (
                full_df_reindexed["Power consumed locally from source BA (MWh)"]
                * full_df_reindexed["Generation (% of BA generation)"]
            )
            .rename("Usage (MWh)")
            .reset_index()
        )
        usage_by_ba_and_generation_type
  - cellType: CODE
    cellId: f33e76be-3e92-4dd0-94ed-26007d09d070 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Fetch data: Demand, Net generation, and Total interchange"
    config:
      source: |-
        
        demand_df
  - cellType: CODE
    cellId: 4965cfae-d594-46a0-9e2c-c8a3e5649be7 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Fetch data: Interchange (import or export) with each connected BA"
    config:
      source: interchange_df
  - cellType: MARKDOWN
    cellId: 1be96583-49b4-4dfd-b189-1274d3b71182 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Subhead
    config:
      source: "# Which Balancing Authorities supply my electricity?"
  - cellType: CHARTV2
    cellId: c3aa554b-dd1f-4a8e-8ec4-a03a14d0d734 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Energy consumed locally, broken down by source BA
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: a84be1bf-fa1e-4b97-97d0-6a2da364421d
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              timeUnit: yearmonthdatehours
              dataFrameColumn: timestamp
            series:
              - id: a2e011f8-d5de-4eb4-b586-7701a5f2f3b5
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - Power consumed locally (MWh)
                colorDataFrameColumn: fromba
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: energy_consumed_locally_by_source_ba
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        AVA: "#B279A2"
        PGE: "#FF9DA6"
        PJM: "#E45756"
        SCL: "#54A24B"
        TEX: "#F58518"
        AVRN: "#FF9DA6"
        AZPS: "#F58518"
        BANC: "#9D755D"
        BPAT: "#4C78A8"
        CENT: "#4C78A8"
        CHPD: "#F58518"
        CISO: "#BAB0AC"
        DOPD: "#4C78A8"
        GCPD: "#E45756"
        GRID: "#F58518"
        IPCO: "#E45756"
        ISNE: "#4C78A8"
        LDWP: "#72B7B2"
        NEVP: "#54A24B"
        NWMT: "#EECA3B"
        NYIS: "#F58518"
        PACE: "#72B7B2"
        PACW: "#B279A2"
        PSEI: "#72B7B2"
        TPWR: "#EECA3B"
        WALC: "#EECA3B"
        ISNE - ISO New England: "#4C78A8"
        NYIS - New York Independent System Operator: "#F58518"
        LDWP - Los Angeles Department of Water and Power: "#E45756"
      resultVariable: filter_result_5
      outputResult: true
      displayType: CHART
      displayTableConfig:
        pageSize: 50
        height: null
        hideIcons: false
        defaultColumnWidth: null
        hideIndex: false
        defaultSortColumn: null
        defaultSortIndexColumn: null
        defaultSortDirection: ASC
        conditionalFormatting: null
        calcs: null
        filters: []
        columnProperties:
          - originalName: Power consumed locally (MWh)
            renameTo: null
            size: 223
            wrapText: null
            displayFormat: null
          - originalName: fromba
            renameTo: null
            size: 94
            wrapText: null
            displayFormat: null
          - originalName: timestamp
            renameTo: null
            size: 156
            wrapText: null
            displayFormat: null
        columnOrdering: null
        customColumnOrdering: null
        pinnedColumns: null
        hiddenColumns: null
        pinIndexColumns: false
        showAggregations: false
        columnAggregations: null
  - cellType: MARKDOWN
    cellId: e26acdee-5013-4202-a351-b31e438c124b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # What fuel types supply my electricity? 
        Combined Local and External Balancing Authorities
  - cellType: CHARTV2
    cellId: 8f259897-f450-4238-9aa5-ab048d0625db # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Local electricity consumption grid mix, including grid mix of imported electricity
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: d2bad689-88ec-4e03-81d8-11758f0b7c69
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              dataFrameColumn: timestamp
            series:
              - id: e6dcca71-c67f-4e71-9fa8-c236bd380740
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorDataFrameColumn: generation_type
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: usage_by_ba_and_generation_type
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Coal: "#4C78A8"
        Wind: "#FF9DA6"
        Hydro: "#F58518"
        Other: "#54A24B"
        Solar: "#B279A2"
        Nuclear: "#72B7B2"
        Unknown: "#9D755D"
        Petroleum: "#EECA3B"
        Natural Gas: "#E45756"
        Natural gas: "#E45756"
      resultVariable: chart_result
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: MARKDOWN
    cellId: 15d37c2d-ad29-4451-8217-77ad1edfbcb1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Response to Assignment
    config:
      source: "# My Findings

        ### Simplify the Data

        After simplifying the data to categorize by 1) Local BA or External BAs and 2) Fossil Fuels, Renewables, or Nuclear/Other, the data visualization by simplified energy sources showed a rather steady energy usage from Renewables and Nuclear/Other energy sources. Fossil Fuels handled more of the variability in usage.


        ### Seasonal Trends

        The spikes in Fossil Fuel usage correlated to the summer months. I examined minimum, maximum, and average energy use of Fossil Fuels for these periods:\ 

        \ - Peak 2022

        \ - Peak 2023

        \ - Off-Peak 2022-23\ 

        \ - Off-Peak 2023-24


        ### Required Renewable Increase

        After noting the average of minimum off-peak fossil fuel usage, I calculated the necessary percentage increase in renewable energy to replace the baseline of fossil fuel energy usage.


        \ <!-- Updates made above: Change time horizon to 2 years -->

        \ <!-- Estimated Coding level Intermediate / 2.0 -->

        \  "
  - cellType: TEXT
    cellId: 2a76813b-7466-4df4-9702-6fd59ad501a5 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: First, I simplified the data to add categorization for
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Local BA or External BA
            - type: li
              children:
                - type: lic
                  children:
                    - text: Fossil Fuels, Renewables, or Nuclear/Other
  - cellType: CODE
    cellId: f44ba88e-e191-4f91-9cfc-fa8fb7c7d282 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Categorize Energy Sources
    config:
      source: |-
        # Prepare simplified dataframe to add columns to categorize 
        # 1) BA as Local or External
        # 2) Energy Source as Renewable/Fossil/Other 
        usage_ba_type_simple = usage_by_ba_and_generation_type
        usage_ba_type_simple['ba'] = usage_ba_type_simple['fromba'].where(usage_ba_type_simple['fromba'] == 'NYIS', other='External BA')
        usage_ba_type_simple['generation_renewable'] = usage_ba_type_simple['generation_type'].replace({
            'Wind': 'Renewable',
            'Solar': 'Renewable',
            'Hydro': 'Renewable',
            'Petroleum': 'Fossil Fuels',
            'Natural gas': 'Fossil Fuels',
            'Natural Gas': 'Fossil Fuels',
            'Coal': 'Fossil Fuels',
            'Nuclear': 'Nuclear/Other',
            'Other': 'Nuclear/Other'
        })

        usage_ba_type_simple
  - cellType: MARKDOWN
    cellId: 66d844c5-838c-471c-86a0-6a43c9e72537 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: "# Is my electricity from Renewable, Fossil Fuels, or Other sources?"
  - cellType: CHARTV2
    cellId: 6c8083af-56fe-4325-ab13-3e2f77e372c9 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Energy from Renewable, Fossil Fuels, and Other SourcesÂ 
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: 85b07bb5-e332-4e27-8096-748fb7daba96
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              title: " 2022-2024"
              dataFrameColumn: timestamp
            series:
              - id: e17d2600-2a98-4936-9d57-c569feed5a44
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorDataFrameColumn: generation_renewable
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                legendTitle: Energy Sources
                line: true
                point: false
                interpolate: linear
                normalize: false
            dataFrame: usage_ba_type_simple
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Coal: "#4C78A8"
        Hmmm: "#F58518"
        NYIS: "#F58518"
        Wind: "#FF9DA6"
        "null": "#72B7B2"
        Hydro: "#F58518"
        Other: "#54A24B"
        Solar: "#B279A2"
        Nuclear: "#72B7B2"
        Unknown: "#72B7B2"
        Petroleum: "#EECA3B"
        Renewable: "#E45756"
        External BA: "#4C78A8"
        Natural gas: "#E45756"
        Fossil Fuels: "#4C78A8"
        Nuclear/Other: "#F58518"
      resultVariable: chart_result_4
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: CODE
    cellId: e512299b-951a-4447-9e64-60771cad26a0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # Simplify to show full 'Usage (MWh)' by day
        daily_usage = usage_ba_type_simple.groupby('timestamp')['Usage (MWh)'].sum().reset_index()

        # Filter 'Usage (MWh)' to show only when there is MWh data
        daily_usage['Filtered Usage (MWh)'] = daily_usage['Usage (MWh)'].where(daily_usage['Usage (MWh)'] > 0)

        avg_daily_usage = daily_usage['Filtered Usage (MWh)'].mean()

        daily_usage['Average Usage (MWh)'] = daily_usage['Filtered Usage (MWh)'].mean() # Delete - testing to show line

        # Calculate the simple moving average (SMA)
        # window_size = 10
        window_size2 = 15 # preferred 
        # daily_usage['SMA'] = daily_usage['Filtered Usage (MWh)'].rolling(window=window_size, center=True).mean()
        daily_usage['SMA2'] = daily_usage['Filtered Usage (MWh)'].rolling(window=window_size2, center=True).mean()

        print(daily_usage)

        # filtered_rows = daily_usage[daily_usage['timestamp'] == '2023-02-19']
        # print(filtered_rows)
        # daily_usage
        # average = daily_usage['Filtered Usage (MWh)'].mean()
        # min = daily_usage['Filtered Usage (MWh)'].min()
        # max = daily_usage['Filtered Usage (MWh)'].max()
        # print(average, min, max)
        #     'Usage (MWh)': round(subset['Usage (MWh)'].min(), 2)
        #     'Usage (MWh)': round(subset['Usage (MWh)'].max(), 2)
  - cellType: CHARTV2
    cellId: 65990d50-8007-4765-8e7a-1f39388d44b1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: f788c687-d6fd-46c1-ad20-843b06b0c884
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              dataFrameColumn: timestamp
            series:
              - id: 0cc7ae27-b612-401b-b658-4d1bcf84e5eb
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - Filtered Usage (MWh)
                colorOrder: ascending
                color:
                  type: static
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                point: false
                stroke: solid
              - id: 9609c440-12e5-4e69-8648-50cba36033b3
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - Average Usage (MWh)
                colorOrder: ascending
                color:
                  type: static
                  color: "#F58518"
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                point: false
                stroke: solid
              - id: 3cf3462c-821c-4c09-b69d-297cf9ee447a
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns: []
                colorOrder: ascending
                color:
                  type: static
                  color: "#E45756"
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                point: false
                stroke: solid
              - id: 1ff6b920-679b-44e0-a90f-671eadc501b3
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - SMA2
                colorOrder: ascending
                color:
                  type: static
                  color: "#72B7B2"
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                point: false
                stroke: solid
            dataFrame: daily_usage
            seriesGroups:
              - - 0cc7ae27-b612-401b-b658-4d1bcf84e5eb
                - 9609c440-12e5-4e69-8648-50cba36033b3
                - 3cf3462c-821c-4c09-b69d-297cf9ee447a
                - 1ff6b920-679b-44e0-a90f-671eadc501b3
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings: {}
      resultVariable: chart_result_9
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: CODE
    cellId: ea996357-a82b-4fdf-ac5b-62a28c514bf2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Identify Peak Period Start and End Dates, Get Usage (MWh) for Each Period, Summarize for Each PeriodÂ Â 
    config:
      source: |-
        # Find start and end dates of all peak periods
        # TODO - Add handling for if peak begins or ends at beginning/end of time frame
        peak_period_dates = []
        # Detect cross-up (SMA crosses above avg_daily_usage)
        daily_usage['Cross_Up'] = (daily_usage['SMA2'].shift(1) < avg_daily_usage) & (daily_usage['SMA2'] > avg_daily_usage)
        # Detect cross-down (SMA crosses below avg_daily_usage)
        daily_usage['Cross_Down'] = (daily_usage['SMA2'].shift(1) > avg_daily_usage) & (daily_usage['SMA2'] < avg_daily_usage)
        # Extract dates when the cross happens
        cross_up_dates = daily_usage.loc[daily_usage['Cross_Up'], 'timestamp'].dt.strftime('%Y-%m-%d').tolist()
        cross_down_dates = daily_usage.loc[daily_usage['Cross_Down'], 'timestamp'].dt.strftime('%Y-%m-%d').tolist()

        # Pair star and end dates into a list
        for cross_up_date, cross_down_date in zip(cross_up_dates, cross_down_dates):
            peak_start_end = (cross_up_date, cross_down_date)
            peak_period_dates.append(peak_start_end)

        # TODO - PREPARE DATA SET FOR ALL OFF PEAK


        # Filter the MWh based on the period's date range
        def get_MWh(periods_dates):
            period_data = daily_usage[(daily_usage['timestamp'] >= periods_dates[0]) & (daily_usage['timestamp'] <= periods_dates[1])]
            filtered_usage_mwh = period_data['Filtered Usage (MWh)']
            return filtered_usage_mwh

        # Prepare summary of data for each period
        def summarize_period_MWh(dates, subset):
            new_summary = {
                'Period': 'Peak Period: ' + dates[0] + ' - ' +dates[1],
                'Average Usage (MWh)': round(subset.mean(), 0),
                'Minimum Usage (MWh)': round(subset.min(), 0),
                'Maximum Usage (MWh)': round(subset.max(), 0)
            }
            return new_summary

        # For each peak period, get associated MWh, and prepare summary for each period 
        summaries_all_periods = []
        for peak_period_date in peak_period_dates:
            peak_subset = get_MWh(peak_period_date)
            summary_period = summarize_period_MWh(peak_period_date, peak_subset)
            summaries_all_periods.append(summary_period)

        summaries_all_periods_df = pd.DataFrame(summaries_all_periods) 
        tidy_summaries_df = pd.melt(summaries_all_periods_df, id_vars='Period', var_name='Summary Type', value_name='Usage (MWh)')

        summaries_all_periods_df
  - cellType: CHARTV2
    cellId: 13fe8a08-b3b3-4104-8622-222069052485 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Usage (MWh)Â  Summary by Periods
    config:
      height: null
      chartSpec:
        type: layered
        facet: {}
        layers:
          - id: dab48110-4c11-40e8-9470-fb0df88693de
            xAxis:
              type: string
              style:
                grid:
                  style: solid
                ticks: {}
                labels:
                  angle: 0
              title: " "
              dataFrameColumn: Period
            series:
              - id: ee3eec3b-3d48-4953-85d1-d0bf8fe28345
                type: bar
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - Usage (MWh)
                colorDataFrameColumn: Summary Type
                colorOrder: ascending
                color:
                  type: series
                  color: "#F58518"
                  dataType: number
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                barWidth: 1
                orientation: vertical
                layout: grouped
            dataFrame: tidy_summaries_df
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Average Usage (MWh): "#4C78A8"
        Maximum Usage (MWh): "#F58518"
        Minimum Usage (MWh): "#E45756"
      resultVariable: chart_result_10
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: MARKDOWN
    cellId: 9b351146-2d80-41a3-a6c5-3bc3a5600482 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Subhead
    config:
      source: "# How much electricity is from fossil fuels?"
  - cellType: CHARTV2
    cellId: 77798991-5d13-42b5-a94c-ab94a062d962 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Energy from Fossil Fuels OnlyÂ 
    config:
      height: null
      chartSpec:
        type: layered
        facet: {}
        layers:
          - id: 326a48f9-e849-4fbf-b29b-3e371eb0f656
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              title: 2022-2024
              dataFrameColumn: timestamp
            series:
              - id: 77d33473-251d-481b-87ec-fd2d111c709a
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorOrder: ascending
                color:
                  type: static
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: usage_ba_type_simple
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Coal: "#4C78A8"
        "True": "#4C78A8"
        "null": "#F58518"
        Petroleum: "#E45756"
        Natural gas: "#F58518"
      resultVariable: chart_result_5
      outputResult: true
      displayType: CHART
      displayTableConfig:
        pageSize: 50
        height: null
        hideIcons: false
        defaultColumnWidth: null
        hideIndex: false
        defaultSortColumn: null
        defaultSortIndexColumn: null
        defaultSortDirection: ASC
        conditionalFormatting: null
        calcs: null
        filters:
          - column: generation_renewable
            predicate:
              op: EQ
              arg: Fossil Fuels
            columnType: STRING
        columnProperties:
          - originalName: Usage (MWh)
            renameTo: null
            size: 150
            wrapText: null
            displayFormat: null
          - originalName: ba
            renameTo: null
            size: 65
            wrapText: null
            displayFormat: null
          - originalName: fromba
            renameTo: null
            size: 91
            wrapText: null
            displayFormat: null
          - originalName: generation_renewable
            renameTo: null
            size: 173
            wrapText: null
            displayFormat: null
          - originalName: generation_type
            renameTo: null
            size: 140
            wrapText: null
            displayFormat: null
          - originalName: row-index-0
            renameTo: null
            size: 46
            wrapText: null
            displayFormat: null
          - originalName: timestamp
            renameTo: null
            size: 156
            wrapText: null
            displayFormat: null
        columnOrdering: null
        customColumnOrdering: null
        pinnedColumns: null
        hiddenColumns: null
        pinIndexColumns: false
        showAggregations: false
        columnAggregations: null
  - cellType: CODE
    cellId: 4f096515-1fe8-46ad-9c1d-d742a4970894 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Simplify Data Set to Usage by Date for Fossil Fuels OnlyÂ 
    config:
      source: |-
        # Subset of data: Timestamp, Generation Source, Usage
        usage_simple = usage_ba_type_simple.groupby(['timestamp','generation_renewable']).sum('Usage(MWh)').reset_index()
        usage_simple['timestamp'] = pd.to_datetime(usage_simple['timestamp'])

        # Smaller subset of data: Timestamp and Usage for Fossil Fuels only
        usage_fossils_simple = usage_simple[usage_simple['generation_renewable'] == 'Fossil Fuels']
        usage_fossils_simple
  - cellType: TEXT
    cellId: ce83cbf1-db47-49a5-87f0-3fb432cacd3c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: "The spikes in Fossil Fuel usage correlated to the summer months (since I am using New York as my test data). I prepared the minimum, maximum, and average energy use of Fossil Fuels for by period: "
  - cellType: CODE
    cellId: 52a3ad38-c1ea-42f9-8bc8-7e45414db4f8 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Simplify Data Set to Usage for Renewables Only and get AvgÂ 
    config:
      source: |-
        # Subset of data: Timestamp and Usage for Renewables only
        usage_renewable_simple = usage_simple[usage_simple['generation_renewable'] == 'Renewable']
        usage_renewable_simple.head()
  - cellType: CODE
    cellId: c0f12be4-9c82-4a71-bca2-b3c1e662efc4 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Simple Analysis for Replading Minimum Fossil Fuels with Renewable Sources
    config:
      source: |
        # Calculate average of minimum Off Peak and Peak usage
        offpeak_fossil_min = int(np.mean([
            summaries_df[(summaries_df['Season'] == 'Off-Peak 2022-23') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            summaries_df[(summaries_df['Season'] == 'Off-Peak 2023-24') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            ]))

        peak_fossil_min = int(np.mean([
            summaries_df[(summaries_df['Season'] == 'Peak Season 2022') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            summaries_df[(summaries_df['Season'] == 'Peak Season 2023') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            ]))


        # Calculate average of all Renewables usage
        usage_renewable_avg = int(usage_renewable_simple['Usage (MWh)'].mean())

        # Calculate percentage increase needed in Renewables (rough)
        replace_fossils_LOE = int((offpeak_fossil_min / usage_renewable_avg)*100)

        # Improve formatting # TODO
        if selected_local_BA == "NYIS":
            BA_display = "New York BA"
        else: 
            BA_display = "Specified BA"

        CRED = '\033[93m'
        CEND = '\033[0m'    

        print(BA_display, "average of minimum monthly energy from fossil fuels:")
        print("  Off-peak: {:,} MWh".format(offpeak_fossil_min))
        print("  Peak: {:,} MWh".format(peak_fossil_min))
        print(f"\n{BA_display} currently supplies an average of {usage_renewable_avg:,} MWh per month from renewable sources.")
        print(f"\nTo replace the baseline fossil fuel usage, {BA_display} must increase energy supply from \nrenewable sources by {CRED}{replace_fossils_LOE}%{CEND}.")
appLayout:
  visibleMetadataFields:
    - NAME
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
    - LAST_RUN
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
  fullWidth: false
  tabs:
    - name: Tab 1
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 46dcf741-4a4e-4b91-acb7-cbe1ec91694d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: bea360c9-60a0-4e53-9fb4-57639684cc6a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 30
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 402d2c5d-3a83-4b30-b9df-c335603ac524
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: a825e967-77fe-420f-89ba-edcc460e4999
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 09bf6c45-8448-4285-9f75-1490a4b21d62
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 365165b9-115d-4085-89c9-8991007569d4
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 63554235-feb9-428f-be5e-91217b13700d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ba0c3f00-2f31-4172-b59e-f793504a7f62
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d76072fc-b05d-43c5-9933-38cc4692acc3
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f33e76be-3e92-4dd0-94ed-26007d09d070
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 4965cfae-d594-46a0-9e2c-c8a3e5649be7
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 1be96583-49b4-4dfd-b189-1274d3b71182
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c3aa554b-dd1f-4a8e-8ec4-a03a14d0d734
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e26acdee-5013-4202-a351-b31e438c124b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 8f259897-f450-4238-9aa5-ab048d0625db
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 66d844c5-838c-471c-86a0-6a43c9e72537
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 6c8083af-56fe-4325-ab13-3e2f77e372c9
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9b351146-2d80-41a3-a6c5-3bc3a5600482
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 77798991-5d13-42b5-a94c-ab94a062d962
                  sharedFilterId: null
                  height: null
                  showLabel: true
sharedFilters: []
