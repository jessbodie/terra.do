schemaVersion: 3
meta:
  sourceVersionId: 4e583ea6-f88f-4e8d-b911-d4bacb29dce6 # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: null
  projectId: f0ab67e7-2431-42fe-a98c-4805f6071d74 # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: Backup of Rain Garden Recommendations (Terra.do Final Project)
  timezone: null
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status: null
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout:
    type: disabled
  publishedQueryCacheTimeout: null
  hexType: PROJECT
  allowExecutionReordering: true
  prerunApp: false
  cachePublishedAppState: true
  refreshStalePublishedApp: true
  autoRerunApp: true
projectAssets:
  dataConnections: []
  envVars: []
  secrets: []
sharedAssets:
  secrets: []
  vcsPackages: []
  dataConnections:
    - dataConnectionId: 78b87430-a82f-4677-9b08-163f12dbab05 # [Demo] Hex Public Data (snowflake)
    - dataConnectionId: e8480949-7368-449c-b922-66d0c52bbad0 # Supabase (postgres)
  externalFileIntegrations: []
cells:
  - cellType: MARKDOWN
    cellId: 7470f848-ed1d-4ed4-acab-c0fbccda7565 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Goals, Write Up Stuff
    config:
      source: |+
        ## Problem
        * Due to climate change, flash flooding events are occuring with greater frequency. Aside from the disruption and damage of a flash flood, excess stormwater pollutes the runoff flowing into streets and local waterways.
          *  "Runoff picks up fertilizer, oil, pesticides, dirt, bacteria and other pollutants as it makes its way through storm drains and ditches - untreated - to our streams, rivers, lakes and the ocean. Polluted runoff is one of the greatest threats to clean water in the U.S." (EPA)
        * Individuals often do not know how they can help mitigate the effects of climate change 


        ## Proposed Solution
        * Provide community members with a better understanding of localized precipitation
        * Educate community members about the benefits of rain gardens and "sponges"
        * Provide a calculator to help individuals plan and a rain garden including dimensinos and recommended plants

  - cellType: MARKDOWN
    cellId: a8925a41-6ff1-4b27-bc6a-7356b506d032 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Break - SETUP
    config:
      source: "# SETUP"
  - cellType: CODE
    cellId: 710a93e4-289a-44fa-aca2-f90f062ed367 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Import Libraries
    config:
      source: |
        import pandas as pd
        import numpy as np
        import requests
        import json
        import math
        from geopy.geocoders import Nominatim
        from IPython.display import HTML, display
  - cellType: MARKDOWN
    cellId: 8e01d764-4975-47ae-8c05-60feeafb456b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Break - LOCATION
    config:
      source: "# LOCATION"
  - cellType: TEXT
    cellId: 066e65cc-39e4-40ac-af03-eec7c5dd86d6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: _________________________________________________________________
  - cellType: INPUT
    cellId: 2522da88-a7fb-4634-bc59-15f61b4d3f7e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Input an Address:"
    config:
      inputType: TEXT_INPUT
      name: input_address
      outputType: STRING
      options: null
      defaultValue: 227 92nd St. Brooklyn NY 11209
  - cellType: CODE
    cellId: 3a1757f1-8e9c-4e10-9138-11b4dbca23d8 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Convert address to lattitude and longitude values
    config:
      source: |+
        # Convert address to lattitude and longitude values 
        loc = Nominatim(user_agent="Geopy Library")
        getLoc = loc.geocode(input_address)
        if getLoc:
            lat = getLoc.latitude
            lon = getLoc.longitude
            geopy_address = getLoc.address
            print('')
        else:
            print(f"Error: Please enter a new address and try again.")

  - cellType: TEXT
    cellId: c95a1c69-dd73-45a1-af8d-079ea7eb3296 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: _________________________________________________________________
  - cellType: MARKDOWN
    cellId: 285adc85-9f2d-470c-a280-908807cbd1b6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Break - PRECIPITATION
    config:
      source: "# PRECIPITATION"
  - cellType: CODE
    cellId: 570e2fef-1612-446a-b03e-476947f980ef # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Set Constant Variables
    config:
      source: |
        # Open Meteo API initiates historical data 5 days prior to today.
        # Identify dates for getting prior 2 years data 
        today = pd.Timestamp.now()
        date_5_days_ago = today - pd.Timedelta(days=5)
        NUM_YEARS = 2
        date_years_ago = date_5_days_ago - pd.Timedelta(days=(365*NUM_YEARS)) 

        DATE_START = date_years_ago.strftime('%Y-%m-%d')
        DATE_END = date_5_days_ago.strftime('%Y-%m-%d')

        # Assume 98% is the percentile threshold 
        PERCENTILE_THRESHOLD = 99

        # Assume a rate of .5 inches of precipitation per hour is the threshold 
        MIN_PRECIP = .01

        # Start with a rate of .5 inches of precipitation per hour as the threshold 
        max_precip_rate = 0.5

        # Start with 2 inches of precipitation in a day as the threshold 
        daily_precip_threshold = 2
  - cellType: CODE
    cellId: 87790e0f-f7fd-4421-aeea-5d462dccc105 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Get Historical Local Weather Data from Open-Meteo
    config:
      source: |
        # TODO, set up for UTC/time zones
        time_zone_ET = 'America%2FNew_York' 

        # Get historical precipitation data from Open-Meteo
        API_URL = f'https://archive-api.open-meteo.com/v1/archive?latitude={lat}&longitude={lon}&start_date={DATE_START}&end_date={DATE_END}&hourly=precipitation&daily=precipitation_sum&temperature_unit=fahrenheit&precipitation_unit=inch&timezone={time_zone_ET}'

        # if get_historical_weather_data:
        response = requests.get(API_URL)
        if response.status_code == 200:
            json_data = response.json()
            open_meteo_precip_df = pd.DataFrame(json_data)
                
            # Save the JSON data to a file
            with open('data.json', 'w') as file:
                json.dump(json_data, file, indent=4)
        else:
            print(f"Error: {response.status_code}")

        open_meteo_precip_df
  - cellType: CODE
    cellId: 5835de70-9d9e-4bb5-8384-758c062b0e9c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Reduce and Flatten Hourly Precipitation Data from Open-MeteoÂ 
    config:
      source: |
        # Reduce and flatten Open-Meteo Hourly Data
        open_meteo_hourly_df_initial = pd.DataFrame(open_meteo_precip_df['hourly'])

        open_meteo_hourly_df = pd.DataFrame({
            'time': open_meteo_hourly_df_initial['hourly']['time'],
            'precipitation': open_meteo_hourly_df_initial['hourly']['precipitation']
        })

        open_meteo_hourly_df['time'] = pd.to_datetime(open_meteo_hourly_df['time'])
        open_meteo_hourly_df
  - cellType: CODE
    cellId: 452432ee-ccfb-4a15-9c2c-cb51798b56b6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Sort Hourly Precipitation Data by Percentile
    config:
      source: |
        # Sort the Open-Meteo Hourly Data by Percentile
        open_meteo_hourly_perc_df = open_meteo_hourly_df.copy()
        open_meteo_hourly_perc_df = open_meteo_hourly_perc_df.sort_values(by='precipitation')
        open_meteo_hourly_perc_df['percentile'] = open_meteo_hourly_perc_df['precipitation'].rank(pct=True) * 100

        open_meteo_hourly_perc_df.tail(100)
  - cellType: CODE
    cellId: 2faf534b-ab0c-4417-860f-3a10d8e3a6d4 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Calculate Summary Hourly Rate of Precipitation
    config:
      source: |-
        # Identify what percentile is the rate of precipitation greater than the threshold

        # Handle for when hourly rate is less than max precipitation rate set
        if open_meteo_hourly_perc_df['precipitation'].max() < max_precip_rate:
            max_precip_rate = open_meteo_hourly_perc_df['precipitation'].quantile(.995)

        open_meteo_hourly_high_df = open_meteo_hourly_perc_df[open_meteo_hourly_perc_df['precipitation'] >= max_precip_rate]
        percentile_hourly_high = open_meteo_hourly_high_df['percentile'].min()
        # Identify number of precipitation events exceeding threshold
        num_hourly_high_events = len(open_meteo_hourly_high_df)
        # Identify maximum rate 
        hourly_high = open_meteo_hourly_high_df['precipitation'].max()

        # Filter for daily precipitation events greater than the percentile threshold 
        open_meteo_daily_top = open_meteo_hourly_perc_df[open_meteo_hourly_perc_df['percentile'] > PERCENTILE_THRESHOLD]
        percentile_threshold_hourly = open_meteo_daily_top['precipitation'].min()
  - cellType: CODE
    cellId: a393e76d-9d1c-41cd-8b12-317ff56db83b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Filter Data for Hourly Rate of Precipitation Greater thanÂ  HourlyÂ  Threshold Rate
    config:
      source: |
        # Filter for events with more than minimum precipitation threshold 
        open_meteo_hourly_nonozero_df = open_meteo_hourly_df.copy()
        open_meteo_hourly_nonozero_df = open_meteo_hourly_nonozero_df[open_meteo_hourly_nonozero_df['precipitation'] > MIN_PRECIP]
        open_meteo_hourly_nonozero_df['threshold'] = max_precip_rate
        open_meteo_hourly_nonozero_df

        # all hourly precip events above .01"
        open_meteo_hourly_nonozero_df
  - cellType: CHARTV2
    cellId: 91371009-dc18-4262-af89-4330fa0987b2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Hourly Rate of Precipitation, Hours that Surpassed Threshold
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: 89d8aa10-f054-473e-9b11-1796eacb0ef5
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              title: Previous Two Years
              dataFrameColumn: time
            series:
              - id: ffbcf5fd-ee6c-4a78-8f2c-c297d124ce79
                type: bar
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  title: Rate of Precipitation (inches/hour)
                dataFrameColumns:
                  - precipitation
                colorOrder: ascending
                color:
                  type: static
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                barWidth: 1
                orientation: vertical
                layout: stacked
              - id: a5f247c4-6f80-406e-bf55-b5803aa73af2
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  title: Rate of Precipitation (inches/hour)
                dataFrameColumns:
                  - threshold
                colorOrder: ascending
                color:
                  type: static
                  color: "#F58518"
                opacity:
                  type: static
                  value: 0.6
                tooltip:
                  type: auto
                point: false
                stroke: solid
            dataFrame: open_meteo_hourly_nonozero_df
            seriesGroups:
              - - ffbcf5fd-ee6c-4a78-8f2c-c297d124ce79
                - a5f247c4-6f80-406e-bf55-b5803aa73af2
        settings:
          legend:
            position: none
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings: {}
      resultVariable: chart_result_13
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: CHARTV2
    cellId: ee40ce67-e43f-41d3-a784-a1ecca5e66d7 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Precipitation Events Above Threshold for Hourly PrecipitationÂ 
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: 06e86df3-0980-46a3-a28b-87a2d7670251
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              dataFrameColumn: time
            series:
              - id: bc6bb04f-d96b-49b7-ada7-096f6274183b
                type: bar
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - precipitation
                colorOrder: ascending
                color:
                  type: static
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                barWidth: 1
                orientation: vertical
                layout: stacked
            dataFrame: open_meteo_hourly_high_df
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings: {}
      resultVariable: chart_result_9
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: TEXT
    cellId: 6e1f1e21-f5aa-402d-b9e7-b65f92f5b9f3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: DAILY ANALYSIS
  - cellType: CODE
    cellId: 7ca620ff-9ff3-4ac4-96af-11dd6a5d3574 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Reduce and Flatten Daily Precipitation Data from Open-MeteoÂ 
    config:
      source: |
        # Reduce and flatten Open-Meteo Daily Precipitation Data
        open_meteo_daily_df_initial = pd.DataFrame(open_meteo_precip_df['daily'])

        open_meteo_daily_df = pd.DataFrame({
            'time': open_meteo_daily_df_initial['daily']['time'],
            'precipitation_sum': open_meteo_daily_df_initial['daily']['precipitation_sum']
        })

        open_meteo_daily_df['time'] = pd.to_datetime(open_meteo_daily_df['time'])
        open_meteo_daily_df
  - cellType: CODE
    cellId: eeb2e356-e682-4cd2-9ccd-9bc3eb7dbc17 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Total Precipitation - Year AverageÂ 
    config:
      source: |-
        # Average total inches precipiation in a year
        total_precip_yr = round(open_meteo_daily_df['precipitation_sum'].sum() / NUM_YEARS)
        total_precip_yr
  - cellType: CODE
    cellId: 6ea496ba-c124-462f-8a08-924ccd2cf518 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Filter Data Precipitation for Precipitation Greater than DailyÂ  Minimum PrecipitationÂ 
    config:
      source: |+
        # Filter for events with more than minimum precipitation (.01") precipitation in a day
        open_meteo_daily_nonozero_df = open_meteo_daily_df.copy()
        open_meteo_daily_nonozero_df = open_meteo_daily_nonozero_df[open_meteo_daily_nonozero_df['precipitation_sum'] > MIN_PRECIP]

  - cellType: CODE
    cellId: c209361b-794b-4edb-9fe9-33fb6145772a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Calculate Average Number of Days with Precipitation
    config:
      source: |-
        # Calculate average number of days with precipitation
        avg_total_days_w_precip = round((open_meteo_daily_nonozero_df['precipitation_sum'].count() / NUM_YEARS ))
        avg_total_days_w_precip
  - cellType: CODE
    cellId: ac73c630-da51-413f-b961-e675ae253b06 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Sort Daily Precipitation Events by Percentile
    config:
      source: |
        # Sort the Daily Precipitation Events by Percentile
        open_meteo_daily_perc_df = open_meteo_daily_nonozero_df.copy()
        open_meteo_daily_perc_df = open_meteo_daily_perc_df.sort_values(by='precipitation_sum')
        open_meteo_daily_perc_df['percentile'] = open_meteo_daily_perc_df['precipitation_sum'].rank(pct=True) * 100

        open_meteo_daily_perc_df
  - cellType: CODE
    cellId: 86c7c839-cb3a-4e47-8b2e-eeb58ef5f607 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Handle for when Daily Precipitation Threshold is Below Set Threshold
    config:
      source: |
        # Handle for when daily amount is less than max precipitation threshold initiated
        if open_meteo_daily_df['precipitation_sum'].max() < daily_precip_threshold:
            daily_precip_threshold = open_meteo_daily_perc_df['precipitation_sum'].quantile(.995)

        # Add threshold to df for visualization
        open_meteo_daily_nonozero_df['threshold'] = daily_precip_threshold
        open_meteo_daily_nonozero_df
  - cellType: CHARTV2
    cellId: 0da82e30-e6cb-48e1-80fe-19760d6f026f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of All Days with Precipitation, Days that Surpassed Threshold
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: 402ff1b4-57a9-4789-a2bc-8a2344f354b6
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              title: " Previous Two Years"
              dataFrameColumn: time
            series:
              - id: e73268d5-e353-42c3-9e33-955b3bf00c79
                type: bar
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  title: Precipitation (inches)
                  aggregate: sum
                dataFrameColumns:
                  - precipitation_sum
                colorOrder: ascending
                color:
                  type: static
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                barWidth: 1
                orientation: vertical
                layout: stacked
              - id: f3145b04-ae35-4233-b387-043198ba82a0
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  title: Precipitation (inches)
                  aggregate: sum
                dataFrameColumns:
                  - threshold
                colorOrder: ascending
                color:
                  type: static
                  color: "#F58518"
                opacity:
                  type: static
                  value: 0.6
                tooltip:
                  type: auto
                point: false
                stroke: solid
            dataFrame: open_meteo_daily_nonozero_df
            seriesGroups:
              - - e73268d5-e353-42c3-9e33-955b3bf00c79
                - f3145b04-ae35-4233-b387-043198ba82a0
        settings:
          legend:
            position: none
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings: {}
      resultVariable: chart_result_12
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: CODE
    cellId: c462ad17-27e6-4cb2-9995-2a6ff6294159 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Filter for Daily Events greater than Percentile Threshold
    config:
      source: |-
        # Filter for daily precipitation events greater than the percentile threshold 
        open_meteo_daily_top = open_meteo_daily_perc_df[open_meteo_daily_perc_df['percentile'] > PERCENTILE_THRESHOLD]
        percentile_threshold_daily = open_meteo_daily_top['precipitation_sum'].min()
  - cellType: CHARTV2
    cellId: 51d2d624-9db0-4b4f-b6d3-b92cb9d856a7 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Daily Precipitation Events, by Percentile
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: 81f44c15-46fb-46d8-ae87-139c1c7a5bf1
            xAxis:
              type: number
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              dataFrameColumn: percentile
            series:
              - id: 5d99b250-5651-4bad-b68b-16a8c4b884a1
                type: line
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - precipitation_sum
                colorOrder: ascending
                color:
                  type: static
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                point: false
                stroke: solid
            dataFrame: open_meteo_daily_perc_df
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings: {}
      resultVariable: chart_result_11
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: MARKDOWN
    cellId: 5c040b3d-367b-4917-9d8f-5f1edd9b664b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Header
    config:
      source: "### TL;DR"
  - cellType: METRIC
    cellId: 7dd6f499-a983-44f9-a6d5-6cbe93ff12e3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Average Total Precipitation/Year
    config:
      title: inches per year
      valueVariableName: total_precip_yr
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: -1
        abbreviateLargeNumbers: false
      valueColumn: null
      valueRowIndex: null
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: value
      comparisonResultVariable: comparison_value
      outputResult: true
  - cellType: METRIC
    cellId: 788ade94-f13c-4f9f-96d9-dd761f9c5f1c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Average Days with Precipitation/Year
    config:
      title: days per year
      valueVariableName: avg_total_days_w_precip
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: -1
        abbreviateLargeNumbers: false
      valueColumn: null
      valueRowIndex: null
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: value_5
      comparisonResultVariable: comparison_value_2
      outputResult: true
  - cellType: METRIC
    cellId: cc551a76-9a68-45ce-a550-817b4e52a26e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: 99% of Precipitation Less than
    config:
      title: inches per day
      valueVariableName: percentile_threshold_daily
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 2
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: null
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: value_2
      comparisonResultVariable: comparison_value
      outputResult: true
  - cellType: METRIC
    cellId: 269a5558-8ce6-4d53-bb22-9686e3bc0d91 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Max Precipitation in an Hour
    config:
      title: inches per hour
      valueVariableName: hourly_high
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 2
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: null
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: value_3
      comparisonResultVariable: comparison_value
      outputResult: true
  - cellType: CODE
    cellId: c6ff075c-631d-48ad-b08b-70244b0cfc9f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Identify and Summarize Daily Precipitation Events Greater than Threshold
    config:
      source: |+
        # Identify what percentile is the daily precipitation greater than the threshold
        open_meteo_daily_high_df = open_meteo_daily_perc_df[open_meteo_daily_perc_df['precipitation_sum'] >= daily_precip_threshold]
        # percentile_daily_high = open_meteo_daily_high_df['percentile'].min()
        # Identify number of precipitation events exceeding threshold, in prior years
        num_daily_high_events = len(open_meteo_daily_high_df)
        daily_high = open_meteo_daily_high_df['precipitation_sum'].max()
        print(f'''PRECIPITATION SUMMARY - PREVIOUS {NUM_YEARS} YEARS\n
        LOCATION 
        {geopy_address}
            ''')
        print(f'''ANNUALLY
         - There is an average of {total_precip_yr} inches of precipitation/year.''')
        print(f'''
        DAILY  
         - There were {num_daily_high_events} days with precipitation exceeding {daily_precip_threshold:.2f} inches in a day. 
         - {PERCENTILE_THRESHOLD}% of precipitation events total less than {percentile_threshold_daily:.2f} inches in a single day.
         - The most precipitation in a single day was {daily_high:.2f} inches.
         - {avg_total_days_w_precip} days had more than {MIN_PRECIP} inches of precipitation.''')
        print(f'''
        HOURLY
         - There were {num_hourly_high_events} days where the rate of precipitation exceeded {max_precip_rate:.2f} inches/hour. 
         - {PERCENTILE_THRESHOLD}% of precipitation events have an hourly precipitation rate of less than {percentile_threshold_hourly:.2f} inches per hour.
         - The maximum rate of precipitation was {hourly_high:.2f} inches per hour.''')

  - cellType: MARKDOWN
    cellId: d9ebf137-9d1a-44fe-a43c-8a11c7fd24bc # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Break - RAIN GARDEN
    config:
      source: "# RAIN GARDEN"
  - cellType: CODE
    cellId: 1edc787f-12f8-4e50-83b9-4b3fc47f7322 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Rain Garden Size Factors Data
    config:
      source: |-
        # Source for Size Factors: 
        # Washington, D.C. Department of Energy & Environment 
        # Using the Rain Garden Size Factors 
        # https://doee.dc.gov/sites/default/files/dc/sites/ddoe/publication/attachments/RaingardenHow2HomeownerUWExtension.pdf
        # page 9

        rg_size_factors_csv = 'RainGarden-SizeFactors.csv'
        rg_size_factors = pd.read_csv(rg_size_factors_csv)
        rg_size_factors_df = pd.DataFrame(rg_size_factors)
        rg_size_factors_df
  - cellType: CODE
    cellId: 5a52b082-6784-4e9b-baf6-504dea104948 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Restructure Size Factor Data Frame
    config:
      source: |-
        # Convert Size Factor DataFrame to long format
        rg_size_factors_long_df = rg_size_factors_df.copy()
        rg_size_factors_long_df = rg_size_factors_long_df.drop(columns=['Description', 'Typical Percolation Rate (inches/hour) (Low End)', 'Typical Percolation Rate (inches/hour) (High End)']).reset_index(drop=True)
        rg_size_factors_long_df = rg_size_factors_long_df.rename(columns={'3-5" deep': '3, 4, 5', '6-7" deep': '6, 7','8" deep': '8'})

        rg_size_factors_long_df = pd.melt(rg_size_factors_long_df, id_vars=['Type of Soil'], var_name='Depth Range', value_name='Size Factor')
        rg_size_factors_long_df
  - cellType: CODE
    cellId: b2202e8c-2f06-4bba-9a22-47dd9f687810 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: PlantsÂ  Data
    config:
      source: |-
        plants_csv = 'nyc_rain_garden_native_plants.csv'
        plants_df = pd.read_csv(plants_csv)

        plants_df
  - cellType: CODE
    cellId: ab564255-d0f8-4e4a-be9a-b83ebd843a48 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Display Plants in a DF with corresponding Common Name and Images
    config:
      source: |+
        # Display the plant common names and images
        # (Displaying as HTML because displaying inside dataframe was not working)
        # (Images placed on external server) 

        def display_plants_details (plants_display, sun=None, area=None, num=None, layout_display='area'): 

            if (sun):
                sun_display = sun.lower()

            html_content = ''

            if (area) and (num):
                rg_area_display = f'The {layout_display} of your rain garden is about {area:.0f} square feet.'
                rg_num_plants_display = f'Select {round(num)} plants that tolerate wet/damp soil and {sun_display} conditions such as:'
                html_content += f'<p style="font-family: Arial; color: #fff;">{rg_area_display}</p>'
                html_content += f'<p style="font-family: Arial; color: #fff;">{rg_num_plants_display}</p>'
            
            html_content += f'<ul style="list-style-type: none; padding: 0; margin: 0;">'

            for _, row in plants_display.iterrows():
                image_html = f'{row["plant_image_filename"]}'
                text_html = f'{row["common_name"]}'
                html_content += f'''
                <li style="margin-bottom: 15px; display: flex; align-items: center;">
                    <img src="https://panix.com/~ianr/jessbodie/{image_html}" width="120" style="margin-right: 15px;">
                    <span style="font-family: Arial; color: #fff;">{text_html}</span>
                </li>
                '''

            html_content += "</ul>"

            return html_content

  - cellType: CODE
    cellId: 1f3b892a-fdee-4056-8ca5-555dede7e148 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Display for All Plants in Data Set: Common Names and Images"
    config:
      source: |
        rg_plants_all = display_plants_details(plants_df)

        # Display the HTML content for All Plants
        display(HTML(rg_plants_all))
  - cellType: CODE
    cellId: 7506d9e1-b70d-4c20-8c20-f9f3519fa8b0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Display all plants with corresponding Common Name and Images
    config:
      source: |-
        # # Display the plant common names and images
        # # (Displaying as HTML because displaying inside dataframe was not working)
        # # Images placed on external server 
        # html_content = """
        # <ul style="list-style-type: none; padding: 0; margin: 0;">
        # """

        # for _, row in plants_df.iterrows():
        #     image_html = f'{row["plant_image_filename"]}'
        #     text_html = f'{row["common_name"]}'
        #     html_content += f'''
        #     <li style="margin-bottom: 15px; display: flex; align-items: center;">
        #         <img src="https://panix.com/~ianr/jessbodie/{image_html}" width="120" style="margin-right: 15px;">
        #         <span style="font-family: Arial; color: #fff;">{text_html}</span>
        #     </li>
        #     '''

        # html_content += "</ul>"

        # # # Display the HTML content
        # display(HTML(html_content))
  - cellType: TEXT
    cellId: 14b12906-464a-4783-b770-6004902d1b1a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "This calculator will help DIYers create their own rain garden in NYC. Tell us about the planned  rain garden location:"
  - cellType: INPUT
    cellId: 32d25a0f-6530-4992-9699-c2a80579fb79 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Slope is flat or less than 12%?
    config:
      inputType: CHECKBOX
      name: input_slope
      outputType: BOOLEAN
      options:
        style: checkbox
        text: Yes
      defaultValue: true
  - cellType: INPUT
    cellId: b9e9b94a-0c1a-4204-8ce0-1a6ef894e81b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Select soil type:"
    config:
      inputType: DROPDOWN
      name: input_soil_type
      outputType: STRING
      options:
        valueOptions:
          - Sandy
          - Silty
          - Clayey
          - Loamy
          - I don't know
      defaultValue: Silty
  - cellType: INPUT
    cellId: adf64772-fb3a-47d5-b13c-22cefd39baab # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Sun tolerance:"
    config:
      inputType: DROPDOWN
      name: input_sun
      outputType: STRING
      options:
        valueOptions:
          - Full sun
          - Partial sun
          - Mostly Shady
      defaultValue: Full sun
  - cellType: INPUT
    cellId: 03c93d46-e397-4171-94ad-c35e586c8821 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Percolation rate , if known (inches/hour):"
    config:
      inputType: TEXT_INPUT
      name: input_perc_rate
      outputType: STRING
      options: null
      defaultValue: ""
  - cellType: TEXT
    cellId: bd0221b3-1e9e-4a50-8a3a-6a8be62a8157 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "Tell us about your plans so far:"
  - cellType: INPUT
    cellId: d5f4ba8e-640f-46d5-aab6-74af71d2f1a9 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Input catchment surface area (square feet):"
    config:
      inputType: NUMERIC_INPUT
      name: input_catchment_SA
      outputType: NUMBER
      options:
        increment: 1
      defaultValue: "140"
  - cellType: INPUT
    cellId: 0d01acb8-84bd-4ece-bb3c-88dbab7e980b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Planned depth (inches):"
    config:
      inputType: SLIDER
      name: input_planned_depth
      outputType: NUMBER
      options:
        min: 3
        max: 9
        step: 1
      defaultValue: 6
  - cellType: INPUT
    cellId: 50a73c76-9805-4c3e-9dbe-741a39d558e5 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Size for storm water mitigation?
    config:
      inputType: CHECKBOX
      name: input_storms
      outputType: BOOLEAN
      options:
        style: checkbox
        text: Yes
      defaultValue: true
  - cellType: INPUT
    cellId: ec0b9187-6428-4313-8f36-4fc1de34614c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Calculate My Rain Garden
    config:
      inputType: BUTTON
      name: input_calculate
      outputType: BOOLEAN
      options:
        intent: success
        icon: play
        text: Calculate
      defaultValue: null
  - cellType: CODE
    cellId: f6e44f47-dd3f-4830-bf0b-49c3de2b5299 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Based on User Inputs, Plants Data, Sizing Factor Data, and Calculations, Prepare Dimensinos and Plane MakeupÂ  for a DIY Rain Garden
    config:
      source: |+
        rg_instructions =[]

        # When the Calculate button is pressed:
        if input_calculate:

            # Initiate array to hold all instructions for Rain Garden
            rg_instructions =['Rain gardens should be located at least 10 feet from any foundations and in an area that is not in conflict with any underground utilities.\n']

            # Check if basic conditions exist for a Rain Garden, add to instructions
            if input_slope is not True:
                rg_instructions = np.append(rg_instructions, 'Rain gardens should only be planted in locations where the incline is less than 12%. Look for another location.\n')

            if input_soil_type == 'Clayey':
                rg_instructions = np.append(rg_instructions, f'''If your soil type is {input_soil_type}, a rain garden will only be appropriate if the percolation rate is greater than 0.5 inches. 
        Consider other locations, or plan to ammend the soil.\n''')



            # Identify criteria for selecting a size factor based on soil type and percolation rate
            soil_type_lookup = input_soil_type

            # If soil type is Loamy or Unknown, change to Silty 
            # No Sizing Factor available specifically for "Loamy"
            if (input_soil_type == 'Loamy') or (input_soil_type == 'I don\'t know'):
                soil_type_lookup = 'Silty'

            # Error handling for percolation rate input
            perc_rate = input_perc_rate
            if (len(input_perc_rate) > 0):
                try:  
                    perc_rate = float(input_perc_rate)
                    if perc_rate > 0 and perc_rate < 0.5:
                        soil_type_lookup = 'Clayey'
                        rg_instructions = np.append(rg_instructions, f'''Since the percolation rate is less than 0.5", a rain garden is not recommended. 
        Consider other locations, or plan to amend the soil.\n''')
                    elif perc_rate >= 0.5 and perc_rate <= 2:
                        soil_type_lookup = 'Silty'
                    elif perc_rate > 2:
                        soil_type_lookup = 'Sandy'
                    elif perc_rate == 0 or perc_rate is None:
                        soil_type_lookup = 'Silty'
         
                except ValueError:
                    rg_instructions = np.append(rg_instructions, f'The input Percolation Rate was not understood. A percolateion rate of 1 inch per hour (or Silty soil) was used for these results.\n')
                    # If invalid percolation input, assume the Soil Type is mid-range Silty
                    soil_type_lookup = 'Silty'


            # Get the Size Factor Coefficient based on Soil Type and the input Planned Depth
            def get_size_factor(soil_type_lookup, depth):
                # If planned depth is 8" or greater, use 8" Size Factor
                if depth > 8:
                    depth_str = str(8)
                else:
                    depth_str = str(depth)
                result = rg_size_factors_long_df[(rg_size_factors_long_df['Type of Soil'] == soil_type_lookup) & (rg_size_factors_long_df['Depth Range'].str.contains(depth_str))]
                if not result.empty:
                    return result['Size Factor'].values[0]
                # else: TODO
                #     return 'No Size Factor found'

            size_factor = get_size_factor(soil_type_lookup, input_planned_depth)

            # Incorporate rainfall rate 
            # If rainfall at the top percentile threshold is below .5", set to .5"
            # Otherwise use top percentile rainfall rate
            if percentile_threshold_hourly < .5:
                rainfall = .5
            else:
                rainfall =  percentile_threshold_hourly

            # If storm water mitigation is a goal, use the precipitation rate maximum
            if input_storms == True:
                rainfall = hourly_high

            # Rain Garden Area Calculation
            # Rain Garden Area = Catchment Surface Area * Rain Fall Rate * Size Factor
            rg_area = input_catchment_SA * rainfall * size_factor
            rg_suggested_length = math.sqrt(rg_area / 2) 
            rg_suggested_width = rg_suggested_length * 2

            # Add Rain Garden Area and Dimensions to instructions  
            rg_instructions = np.append(rg_instructions, f'The recommended area for your rain garden is about {round(rg_area)} square feet.')
            rg_instructions = np.append(rg_instructions, f'''   - The recommended dimensions are about {round(rg_suggested_width)} feet by about {round(rg_suggested_length)} feet. 
           - The greater dimension should be perpendicular to the predominant water flow.''')
            rg_instructions = np.append(rg_instructions, f'   - Calculations are based on:')
            rg_instructions = np.append(rg_instructions, f'      a precipitation rate of {rainfall:.2f} inches/hour''')
            rg_instructions = np.append(rg_instructions, f'      a planned depth of {input_planned_depth} inches')
            rg_instructions = np.append(rg_instructions, f'      a sizing factor of {size_factor}')
            if perc_rate:
                rg_instructions = np.append(rg_instructions, f'      a percolation rate of {perc_rate} inches/hour')


            # Assume each rain garden plant should be alloted 1.5 square feet to start
            rg_plant_width = 1.5
            rg_plant_area = rg_plant_width * rg_plant_width

            # Calculate How Many Plants for the Interior and Outer (Perimeter) Portions of the Garden
            # Calculate how many plants for interior
            rg_interior_area = (rg_suggested_length - rg_plant_width) * (rg_suggested_width - rg_plant_width)
            rg_plants_num_interior = rg_interior_area / rg_plant_area
            # Calculate how many plants for outer/perimeter
            rg_outer_area = rg_area - rg_interior_area
            rg_plants_num_outer = rg_outer_area / rg_plant_area

            # Categorize sun type based on user input
            if input_sun == 'Full sun':
                sun = 'SUN' 
            elif input_sun == 'Mostly Shady':
                sun = 'SHADE'
            else: 
                sun = 'MIXED'

            # Prepare plants list based on rain garden zone and user-input sun tolerance 
            def get_plants(zone, sun):
                plant_recos = plants_df[(plants_df['garden_zone'].str.contains(zone) & \
                plants_df['sun_tolerance'].str.contains(sun))]

                return plant_recos

            plants_interior_df = get_plants('CENTER', sun)
            plants_outer_df = get_plants('PERIMETER', sun)

            # Prepare plants lists to display
            plants_interior_display = (' - ') + plants_interior_df['common_name'].astype(str)
            plants_outer_display = (' - ') + plants_outer_df['common_name'].astype(str)

            # # Add specific area calculations to instructions
            # rg_instructions = np.append(rg_instructions, f'\nThe interior area of your rain garden should be about {rg_interior_area:.1f} square feet.')
            # rg_instructions = np.append(rg_instructions, f'''Select {round(rg_plants_num_interior)} plants that tolerate wet soil and {input_sun.lower()} conditions such as:''') 
            # rg_instructions = np.append(rg_instructions, plants_interior_display)

            # rg_instructions = np.append(rg_instructions, f'\nThe perimeter of your rain garden is about {rg_outer_area:.0f} square feet.')
            # rg_instructions = np.append(rg_instructions, f'''Select {round(rg_plants_num_outer)} plants that tolerate wet/damp soil and {input_sun.lower()} conditions such as:''') 
            # rg_instructions = np.append(rg_instructions, plants_outer_display)

        print('\n'.join(rg_instructions))

  - cellType: CODE
    cellId: 2197a467-bc94-4133-ab32-3b2a211f4fab # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Display Summary of Rain Garden Plants: Interior"
    config:
      source: |-
        rg_display_inner = display_plants_details(plants_interior_df, input_sun, rg_interior_area, rg_plants_num_interior, 'interior')

        # Display the HTML content for Outer/Perimeter Area
        display(HTML(rg_display_inner))
  - cellType: CODE
    cellId: 4982bbcf-f14e-421b-9a8b-b1ce8f2ae36b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Display Summary for Rain Garden Outer/Perimeter
    config:
      source: |
        rg_display_outer = display_plants_details(plants_outer_df, input_sun, rg_outer_area, rg_plants_num_outer, 'perimeter')

        # Display the HTML content for Outer/Perimeter Area
        display(HTML(rg_display_outer))
  - cellType: TEXT
    cellId: 7a97de73-70d8-4c97-abbc-bf1d81904b2f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: RAIN GARDEN DIMENSIONS
  - cellType: MARKDOWN
    cellId: 3ce82973-d13d-43c2-92cd-3aeca951612e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Break
    config:
      source: "### TL;DR"
  - cellType: METRIC
    cellId: f2db2fcd-67d8-4643-83ac-e3f551ff5e35 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: RainÂ  Garden Area
    config:
      title: square feet
      valueVariableName: rg_area
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: METRIC
    cellId: 9b5dbf92-d604-4c59-aa62-ef8d2f8fa2db # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Rain Garden Length
    config:
      title: feet long
      valueVariableName: rg_suggested_length
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: null
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: METRIC
    cellId: 659043e8-fe69-4873-b70a-d5aa117b8df1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Rain Garden Width
    config:
      title: feet wide
      valueVariableName: rg_suggested_width
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: null
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: TEXT
    cellId: c24cb93b-7562-4ab6-aaf5-2a1422f3a3b9 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: RAIN GARDEN -  INTERIOR AND PERIMETER
  - cellType: METRIC
    cellId: f9ede994-2adc-4698-b5d4-7f49e6a23dc0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Interior Area
    config:
      title: square feet
      valueVariableName: rg_interior_area
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: null
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: METRIC
    cellId: 88a27d84-b17a-4b52-8883-ec5928403e8f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "# of Plants in Interior"
    config:
      title: interior plants
      valueVariableName: rg_plants_num_interior
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: METRIC
    cellId: e1bbd14f-12f6-4e35-b75e-e2e8483d7f9a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Perimeter Area
    config:
      title: square feet
      valueVariableName: rg_outer_area
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: METRIC
    cellId: d5cbda38-5c6d-450d-b0d9-94c1cd8908f1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "# of Plants on Perimeter"
    config:
      title: perimeter plants
      valueVariableName: rg_plants_num_outer
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: ""
      displayFormat:
        format: NUMBER
        currency: USD
        columnType: NUMBER
        showSeparators: true
        numDecimalDigits: 0
        abbreviateLargeNumbers: true
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: MARKDOWN
    cellId: e732af81-77e6-4855-a19c-ed496404e9c1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Section Break
    config:
      source: "# IMPACT OF YOUR RAIN GARDEN"
  - cellType: CODE
    cellId: b75177af-7bc6-4796-9de0-b6fad64d2666 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Calculate Storm Runoff Diverted
    config:
      source: |-
        # Formula for potential rain caught per year:
        # Rain diverted = Catchment Area * total inches of rain/year * 0.004329 
        # Multiplier for quantity of water in gallons one inch deep in one square foot of space
        GALLONS_PER_CUBIC_INCH = 0.004329
        storm_water_runoff = round((input_catchment_SA * 144) * total_precip_yr * GALLONS_PER_CUBIC_INCH)

        print(f'''Your rain garden has the potential to divert and filter {storm_water_runoff:,} gallons of storm water each year.''')
  - cellType: METRIC
    cellId: 7e1cf99e-011a-4d9c-be29-8278db33428c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Annual Storm Water Diverted and FilteredÂ 
    config:
      title: Gallons per Year
      valueVariableName: storm_water_runoff
      showComparison: false
      comparisonType: VALUE
      comparisonVariableName: null
      comparisonFormat: null
      comparisonLabel: null
      displayFormat: null
      valueColumn: null
      valueRowIndex: 0
      valueAggregate: null
      comparisonColumn: null
      comparisonRowIndex: null
      comparisonAggregate: null
      valueResultVariable: null
      comparisonResultVariable: null
      outputResult: false
  - cellType: CODE
    cellId: f1a988c9-0909-477d-a286-7376439ed0d4 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: TODO/IDEAS
    config:
      source: |-
        # TODO / IDEAS
        # Any other impact of rain garden, CO2, Carbon sequestered, biodiversity, etc.?
        # Plant list beyond NYC
        #  Put dates with the precip maximums
        # Look at rain rate at the 15-min interfal. Open Meteo doesn't have this data.  
  - cellType: MARKDOWN
    cellId: 3d5abe38-b7c5-418f-be3a-07e19fb7e30f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Notes
    config:
      source: |
        <br>

        ## Notes & Credits

        ### New York City Plants
         * The Lady Bird Johnson Wildflower Center 
            https://www.wildflower.org/plants/

         * The New York Flora Atlas 
            https://newyork.plantatlas.usf.edu/

         * USDA Hardiness Zone Map
            https://planthardiness.ars.usda.gov/

        ### Precipitation

         * Weather Data from Open-Meteo
            https://open-meteo.com/en/docs
            * Note: Total precipitation (rain, showers, snow) sum of the preceding hour. Data is stored with a 0.1 mm precision. 
              If precipitation data is summed up to monthly sums, there might be small inconsistencies with the total precipitation amount.

        ### Rain Gardens

         * Using the Rain Garden Size Factors from Washington, D.C. Department of Energy & Environment 
            https://doee.dc.gov/sites/default/files/dc/sites/ddoe/publication/attachments/RaingardenHow2HomeownerUWExtension.pdf (page 9)

         * Harvest Rain from Water Wise - University of Arizona Cooperative Extension
            https://waterwise.arizona.edu/ways-save-water/harvest-rain


         * Soak Up the Rain: What's The Problem
            https://www.epa.gov/soakuptherain/soak-rain-whats-problem

         * Inches to Gallons Calculator
            https://www.inchcalculator.com/convert/cubic-inch-to-gallon/


        ### Secondary Sources
        * Missouri Botanical Garden
        https://www.missouribotanicalgarden.org/sustainability/sustainability/sustainable-solutions-for-you/rainscaping-guide/design-and-build-a-rain-garden/determine-rain-garden-size-and-depth
        * Beckley Sanitary Board
        https://beckleysanitaryboard.org/build-your-own-rain-garden/
        * Alabama A&M Extension School
        https://www.aces.edu/blog/topics/fish-water/step-4-determine-the-size-and-depth-of-the-rain-garden/#:~:text=For%20quick%20and%20simple%20calculations,be%20treated%20divided%20by%2020.
appLayout:
  visibleMetadataFields:
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
    - LAST_RUN
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
    - NAME
  fullWidth: false
  tabs:
    - name: Overview
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 7470f848-ed1d-4ed4-acab-c0fbccda7565
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c95a1c69-dd73-45a1-af8d-079ea7eb3296
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3d5abe38-b7c5-418f-be3a-07e19fb7e30f
                  sharedFilterId: null
                  height: null
                  showLabel: false
    - name: Location
      rows:
        - columns:
            - start: 0
              end: 55
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2522da88-a7fb-4634-bc59-15f61b4d3f7e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3a1757f1-8e9c-4e10-9138-11b4dbca23d8
                  sharedFilterId: null
                  height: null
                  showLabel: false
    - name: Precipitation
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 285adc85-9f2d-470c-a280-908807cbd1b6
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 5c040b3d-367b-4917-9d8f-5f1edd9b664b
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 30
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 7dd6f499-a983-44f9-a6d5-6cbe93ff12e3
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 30
              end: 60
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 788ade94-f13c-4f9f-96d9-dd761f9c5f1c
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 60
              end: 90
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: cc551a76-9a68-45ce-a550-817b4e52a26e
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 90
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 269a5558-8ce6-4d53-bb22-9686e3bc0d91
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 91371009-dc18-4262-af89-4330fa0987b2
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 0da82e30-e6cb-48e1-80fe-19760d6f026f
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c6ff075c-631d-48ad-b08b-70244b0cfc9f
                  sharedFilterId: null
                  height: null
                  showLabel: false
    - name: Rain Garden Calculator
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d9ebf137-9d1a-44fe-a43c-8a11c7fd24bc
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 14b12906-464a-4783-b770-6004902d1b1a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 25
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 32d25a0f-6530-4992-9699-c2a80579fb79
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 25
              end: 45
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b9e9b94a-0c1a-4204-8ce0-1a6ef894e81b
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 45
              end: 75
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: adf64772-fb3a-47d5-b13c-22cefd39baab
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 75
              end: 105
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 03c93d46-e397-4171-94ad-c35e586c8821
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: bd0221b3-1e9e-4a50-8a3a-6a8be62a8157
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 35
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d5f4ba8e-640f-46d5-aab6-74af71d2f1a9
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 40
              end: 70
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 0d01acb8-84bd-4ece-bb3c-88dbab7e980b
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 75
              end: 100
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 50a73c76-9805-4c3e-9dbe-741a39d558e5
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 35
              end: 70
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ec0b9187-6428-4313-8f36-4fc1de34614c
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3ce82973-d13d-43c2-92cd-3aeca951612e
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 25
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f2db2fcd-67d8-4643-83ac-e3f551ff5e35
                  sharedFilterId: null
                  height: null
                  showLabel: true
            - start: 25
              end: 45
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 88a27d84-b17a-4b52-8883-ec5928403e8f
                  sharedFilterId: null
                  height: 150
                  showLabel: false
            - start: 45
              end: 65
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d5cbda38-5c6d-450d-b0d9-94c1cd8908f1
                  sharedFilterId: null
                  height: 150
                  showLabel: false
            - start: 75
              end: 105
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 7e1cf99e-011a-4d9c-be29-8278db33428c
                  sharedFilterId: null
                  height: 150
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f6e44f47-dd3f-4830-bf0b-49c3de2b5299
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2197a467-bc94-4133-ab32-3b2a211f4fab
                  sharedFilterId: null
                  height: null
                  showLabel: false
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 4982bbcf-f14e-421b-9a8b-b1ce8f2ae36b
                  sharedFilterId: null
                  height: null
                  showLabel: false
sharedFilters: []
