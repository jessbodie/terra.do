schemaVersion: 3
meta:
  sourceVersionId: fbc9933c-5f3a-4d3c-bcb0-f67c77617da4 # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: The project pulls data from the EIA (US Energy Information Agency) API and generates charts of electricity generation and demand over a user-specified time period, in a given region, split by fuel types.
  projectId: a1b57784-4aeb-4548-aa97-14988d21cd91 # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: 2. Electricity Demand and Generation - Jess Richards
  timezone: America/Los_Angeles
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status: null
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout: null
  publishedQueryCacheTimeout: null
  hexType: PROJECT
  allowExecutionReordering: true
  prerunApp: false
  cachePublishedAppState: true
  refreshStalePublishedApp: false
  autoRerunApp: true
projectAssets:
  dataConnections: []
  envVars: []
  secrets: []
sharedAssets:
  secrets: []
  vcsPackages: []
  dataConnections:
    - dataConnectionId: e8480949-7368-449c-b922-66d0c52bbad0 # Supabase (postgres)
  externalFileIntegrations: []
cells:
  - cellType: TEXT
    cellId: 5fe5fb9a-8be4-4502-ac19-d8fce1587c70 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "Find the API documentation here: "
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: ""
                    - url: "https://www.eia.gov/opendata/browser/electricity/rto/daily-region-data "
                      type: a
                      children:
                        - text: "https://www.eia.gov/opendata/browser/electricity/rto/daily-region-data "
                    - text: ""
            - type: li
              children:
                - type: lic
                  children:
                    - text: ""
                    - url: https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48
                      type: a
                      children:
                        - text: https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48
                    - text: ""
  - cellType: TEXT
    cellId: 0cf67e28-86c0-42a3-8441-ffb4d080488f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: Learning goals
        - type: paragraph
          children:
            - text: |2
                 Welcome to your first deep dive lab assignment!
        - type: paragraph
          children:
            - text: "In this lab, you will:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Learn terminology: "
                    - text: Get introduced to some terminology around utility-scale electricity demand and generation
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Fetch data: "
                    - text: Fetch utility-scale electricity generation and demand timeseries data from the EIA API. To do this, you'll need to get your own API key for the EIA OpenData API
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Plot the data: "
                    - text: Plot the data to get an understanding of how it varies over time (using Hex's built-in chart widget)
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Analyze the data: "
                    - text: Do or find something interesting with that data. Exactly what is dependent on your coding level, see below
  - cellType: TEXT
    cellId: d4e7074b-8536-4116-a8c8-4f5845767fe3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: Terminology
        - type: p
          children:
            - text: "We'll reference these terms later in the notebook, so it's important to understand them now:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Balancing authority (BA): "
                    - text: the organization in charge of ensuring electricity generation meets electricity demand in a given region. A BA performs it's own local electricity generation, and then either net imports or net exports energy to other connected BAs, depending on whether local electricity demand is larger or smaller than local electricity generation
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Grid mix:"
                    - text: " electricity generation breakdown by fuel type (e.g., coal, natural gas, solar, hydro, etc.)"
  - cellType: TEXT
    cellId: 02a85dc4-f927-4829-971c-c1ba67c60c4e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: "Instructions: Coding level 0-1"
        - type: p
          children:
            - text: You will run the existing notebook, and then you'll make two small changes to update it to access data from a different balancing authority (your own local BA if US-based)
        - type: p
          children:
            - text: "In the next cells, we are going to:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Import 3rd party libraries
            - type: li
              children:
                - type: lic
                  children:
                    - text: Get and set up API key for the EIA API
                    - bold: true
                      text: " (you'll make changes here!)"
            - type: li
              children:
                - type: lic
                  children:
                    - text: Define some data access helper functions
            - type: li
              children:
                - type: lic
                  children:
                    - text: "Set some input variables "
                    - bold: true
                      text: (you'll make more changes!)
            - type: li
              children:
                - type: lic
                  children:
                    - text: Fetch data
            - type: li
              children:
                - type: lic
                  children:
                    - text: Plot and explore the data
  - cellType: CODE
    cellId: 0ab6f2ba-1a6d-4be1-8bc8-04b7c60b8fc6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: 1. Imports
    config:
      source: |-
        # In this cell, we're importing packages that we'll use later in the notebook
        # You do not need to make changes to this cell

        # 1st party packages (python standard library)
        import datetime
        import json
        import requests

        # 3rd party packages
        from IPython import display
        import pandas as pd
  - cellType: CODE
    cellId: 7f347f69-0f3b-4b69-8298-b19a66167417 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: 2. Input - EIA API key
    config:
      source: |-
        # Get your EIA API key for access to the EIA's wealth of data!
        # To do this:
        #  1. Go to https://www.eia.gov/opendata/ and click "Register"
        #  2. Fill out the form and click "Register"
        #  3. Follow the verification link in your e-mail (may need to check spam)
        #  4. Enter it in quotes below - it will be some long string of characters 

        # After you enter your key, line 10 should look something like:
        # EIA_API_KEY = "7JGnW6m4w7ACRic13tTgNJWWusekOicRroJX0Hqg"
        EIA_API_KEY = "Z1SiTSzQ2gYPesLe83qRYJEFW7PbMu7A7pVtibka"


        assert EIA_API_KEY != "", "You must set an EIA API key before continuing."
  - cellType: CODE
    cellId: 233b1a3c-ddf9-4c26-ab47-91fc90b68293 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: 3. Data access helper functions
    config:
      source: |-
        # In this cell, we've pre-defined some helper functions you will use to fetch data from the EIA API
        # You do not need to make changes to this cell

        # There are three types of data we're fetching:
        #  1. Generation by fuel type (Megawatt-hours): how much electricity is being generated by each fuel type
        #  2. Demand (Megawatt-hours): how much electricity is being consumed
        #  3. Interchange: how much electricity is being imported/exported from other balancing authorities

        default_end_date = datetime.date.today().isoformat()
        default_start_date = (datetime.date.today() - datetime.timedelta(days=(365*2))).isoformat()


        def get_eia_timeseries(
            url_segment,
            facets,
            value_column_name="value",
            # start_date=default_start_date,
            # end_date=default_end_date,
            # Hard code to easier evaluate seasonality
            start_date=datetime.date(2022, 6, 1).isoformat(),
            end_date=datetime.date(2024, 5, 31).isoformat(),
            start_page=0,
        ):
            """
            A generalized helper function to fetch data from the EIA API
            """

            max_row_count = 5000  # This is the maximum allowed per API call from the EIA
            api_url = f"https://api.eia.gov/v2/electricity/rto/{url_segment}/data/?api_key={EIA_API_KEY}"
            offset = start_page * max_row_count

            response_content = requests.get(
                api_url,
                headers={
                    "X-Params": json.dumps(
                        {
                            "frequency": "daily",
                            "data": ["value"],
                            "facets": dict(**{"timezone": ["Pacific"]}, **facets),
                            "start": start_date,
                            "end": end_date,
                            "sort": [{"column": "period", "direction": "desc"}],
                            "offset": offset,
                            "length": max_row_count,
                        }
                    )
                },
            ).json()

            # Sometimes EIA API responses are nested under a "response" key. Sometimes not 🤷 :lol
            if "response" in response_content:
                response_content = response_content["response"]

            print(f"{len(response_content['data'])} rows fetched")

            # Convert the data to a Pandas DataFrame and clean it up for plotting & analysis.
            dataframe = pd.DataFrame(response_content["data"])
            # Add a more useful timestamp column
            dataframe["timestamp"] = dataframe["period"].apply(
                pd.to_datetime, format="%Y/%m/%dT%H"
            )
            # Clean up the "value" column-
            # EIA always sends the value we asked for in a column called "value"
            # Oddly, this is sometimes sent as a string though it should always be a number.
            # We convert its dtype and set the name to a more useful one
            eia_value_column_name = "value"
            processed_df = dataframe.astype({eia_value_column_name: float}).rename(
                columns={eia_value_column_name: value_column_name}
            )

            # Pagination logic
            rows_fetched = len(processed_df) + offset
            rows_total = int(response_content["total"])
            more_rows_needed = rows_fetched != rows_total
            if more_rows_needed:
                # Recursive call to get remaining rows
                additional_rows = get_eia_timeseries(
                    url_segment=url_segment,
                    facets=facets,
                    value_column_name=value_column_name,
                    start_date=start_date,
                    end_date=end_date,
                    start_page=start_page + 1,
                )
                return pd.concat([processed_df, additional_rows])
            else:
                return processed_df

        def get_eia_timeseries_for_co2_data(
            facets,
            value_column_name="value",
            # start_date=default_start_date,
            # end_date=default_end_date,
            start_page=0,
        ):
            """
            A generalized helper function to fetch data from the EIA API
            """

            max_row_count = 5000  # This is the maximum allowed per API call from the EIA
            api_url = f"https://api.eia.gov/v2/co2-emissions/co2-emissions-aggregates/data/?api_key={EIA_API_KEY}"
            offset = start_page * max_row_count

            response_content = requests.get(
                api_url,
                headers={
                    "X-Params": json.dumps(
                        {
                            "frequency": "annual",
                            "data": ["value"],
                            # "facets": dict(**{"timezone": ["Pacific"]}, **facets),
                            # "start": start_date,
                            # "end": end_date,
                            "sort": [{"column": "period", "direction": "desc"}],
                            "offset": offset,
                            "length": max_row_count,
                        }
                    )
                },
            ).json()

            # Sometimes EIA API responses are nested under a "response" key. Sometimes not 🤷 :lol
            if "response" in response_content:
                response_content = response_content["response"]

            print(f"{len(response_content['data'])} rows fetched")

            # Convert the data to a Pandas DataFrame and clean it up for plotting & analysis.
            dataframe = pd.DataFrame(response_content["data"])
            # Add a more useful timestamp column
            dataframe["timestamp"] = dataframe["period"].apply(
                pd.to_datetime, format="%Y/%m/%dT%H"
            )
            # Clean up the "value" column-
            # EIA always sends the value we asked for in a column called "value"
            # Oddly, this is sometimes sent as a string though it should always be a number.
            # We convert its dtype and set the name to a more useful one
            eia_value_column_name = "value"
            processed_df = dataframe.astype({eia_value_column_name: float}).rename(
                columns={eia_value_column_name: value_column_name}
            )

            # Pagination logic
            rows_fetched = len(processed_df) + offset
            rows_total = int(response_content["total"])
            more_rows_needed = rows_fetched != rows_total
            if more_rows_needed:
                # Recursive call to get remaining rows
                additional_rows = get_eia_timeseries_for_co2_data(
                    # url_segment=url_segment,
                    facets=facets,
                    value_column_name=value_column_name,
                    # start_date=start_date,
                    # end_date=end_date,
                    start_page=start_page + 1,
                )
                return pd.concat([processed_df, additional_rows])
            else:
                return processed_df


        def get_eia_grid_mix_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity generation data by fuel type
            """
            return get_eia_timeseries(
                url_segment="daily-fuel-type-data",
                facets={"respondent": balancing_authorities},
                value_column_name="Generation (MWh)",
                **kwargs,
            )

        def get_eia_co2_emissions_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity generation data by co2 emissions
            """
            return get_eia_timeseries_for_co2_data(
                facets={"respondent": balancing_authorities},
                value_column_name="value",
                **kwargs,
            )

        def get_eia_net_demand_and_generation_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity demand data
            """
            return get_eia_timeseries(
                url_segment="daily-region-data",
                facets={
                    "respondent": balancing_authorities,
                    "type": ["D", "NG", "TI"],  # Filter out the "Demand forecast" (DF) type
                },
                value_column_name="Demand (MWh)",
                **kwargs,
            )


        def get_eia_interchange_timeseries(balancing_authorities, **kwargs):
            """
            Fetch electricity interchange data (imports & exports from other utilities)
            """
            return get_eia_timeseries(
                url_segment="daily-interchange-data",
                facets={"toba": balancing_authorities},
                value_column_name=f"Interchange to local BA (MWh)",
                **kwargs,
            )
  - cellType: CODE
    cellId: 8a5984f5-26b6-4e11-8b1a-ed78db486988 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: 4. Input - set your local BA
    config:
      source: |-
        # In this cell, you'll be making one change!

        # This cell defines the local balancing authority for which we're fetching grid mix data

        # Currently, we've set this to "PSEI", i.e.Puget Sound Energy, Inc., the balancing authority for the region around Seattle, WA

        # Change this to a different valid balancing authority:
        #  - Visit the EIA API docs here: https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48
        #  - Explore the map to find the 3-4 letter acronym representing a different balancing authority
        #  - Update the line below with the value you found, then re-run this cell (Shift+Enter, or use the "play" icon in the upper right of this cell)
        LOCAL_BALANCING_AUTHORITY = "NYIS"
  - cellType: CODE
    cellId: ec707cd4-5e3d-418e-b7aa-fa10cd09f38c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "5. Fetch data: local generation grid mix"
    config:
      source: |-
        # In this cell, we put it all together and actually make a request against the EIA API to fetch electricity generation data
        # You do not need to make changes to this cell

        local_generation_grid_mix = get_eia_grid_mix_timeseries(
            [LOCAL_BALANCING_AUTHORITY],
            # Optional: uncomment the lines below to try looking at a different time range to get data from other seasons.
            # start_date="2022-01-01",
            # end_date="2023-01-01",
        )

        # Listing this variable alone on the last line causes hex to display it, so we get a preview of the data as a table
        local_generation_grid_mix
  - cellType: CHARTV2
    cellId: 558b3c8d-f318-4b34-a419-dc8f87b1ecaf # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: 6. Plot local generation grid mix
    config:
      height: 424
      chartSpec:
        type: layered
        layers:
          - id: e66ed52b-79b6-42f5-a753-efe97886e6ca
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              timeUnit: yearmonthdatehours
              dataFrameColumn: timestamp
            series:
              - id: 4c080afe-51ab-4f35-bf94-96a4ec2b9e78
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Generation (MWh)
                colorDataFrameColumn: type-name
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: local_generation_grid_mix
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        NG: "#F58518"
        COL: "#4C78A8"
        OIL: "#E45756"
        OTH: "#72B7B2"
        SUN: "#54A24B"
        WAT: "#EECA3B"
        WND: "#B279A2"
        Coal: "#4C78A8"
        Wind: "#B279A2"
        Hydro: "#F58518"
        Other: "#72B7B2"
        Solar: "#EECA3B"
        Demand: "#F58518"
        Nuclear: "#54A24B"
        Unknown: "#FF9DA6"
        Petroleum: "#54A24B"
        Natural gas: "#E45756"
        Net generation: "#E45756"
        Total interchange: "#72B7B2"
        Day-ahead demand forecast: "#4C78A8"
      resultVariable: filter_result_2
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: TEXT
    cellId: 99012238-fa67-4ff4-9df5-c9c70a12ca3b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: "Coding Level 0-1: Done!"
        - type: paragraph
          children:
            - text: "If you're at coding level 0 or 1: Congrats, you made it through the code!"
              italic: true
            - text: "\n"
        - type: paragraph
          children:
            - text: "Now, go back and play around with the data to look for interesting findings. Ideas:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: What is the primary electricity generation fuel type for the local balancing authority you chose? (e.g. for PSEI, it's natural gas)
            - type: li
              children:
                - type: lic
                  children:
                    - text: Is there more or less clean electricity generation than you expected?
            - type: li
              children:
                - type: lic
                  children:
                    - text: |
                        Are there any major seasonal trends?
        - type: paragraph
          children:
            - text: "In your Assignment submission on the Terra.do app:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Link to your copy of this notebook
            - type: li
              children:
                - type: lic
                  children:
                    - text: Write up a few sentences summarizing your interesting finding
  - cellType: TEXT
    cellId: 3cc95149-ef86-489a-859a-aa8ac8160b73 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: "Coding Level 2-3: Carry on!"
        - type: paragraph
          children:
            - text: If you have strong programming experience, or just want to wade further into the topic, continue on and we'll take it a level deeper!
              italic: true
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: First, we're going to expand this notebook to explore the relationship between local vs imported electricity generation. Then, we'll provide some prompts for how you could expand the notebook further
        - type: paragraph
          children:
            - text: The chart above shows the local electricity generation for your LOCAL_BALANCING_AUTHORITY. However, for many balancing authorities, much of the electricity needed to meet demand is actually imported from other balancing authorities. For example, PSEI imports a large amount of hydroelectric energy from the Bonneville Power Administration (BPAT)
        - type: paragraph
          children:
            - text: In this next section, we are going to combine datasets of demand (local) and generation (local and imported) to get a true representation of the "grid mix" (breakdown by fuel type) of local energy consumed
  - cellType: TEXT
    cellId: bcfe1141-91ff-4fea-83c6-8c7114a60fd9 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: "Terminology: Demand, Net generation, and Total interchange"
        - type: paragraph
          children:
            - text: |
                First, more terminology (https://www.eia.gov/electricity/gridmonitor/about)
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Demand (D):"
                    - text: " energy consumed locally"
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Net generation (NG):"
                    - text: " energy generated locally"
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: "Total interchange (TI):"
                    - text: " net energy exported (positive means net outflow, negative means net inflow)"
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: "The balancing authority is responsible for balancing this equation:"
        - type: codeblock
          children:
            - bold: true
              text: Total interchange = Net generation - Demand
        - type: p
          children:
            - text: i.e. if local generation is larger than local demand, the BA is exporting electricity (positive total interchange). If local demand is larger than local generation, the BA is importing electricity (negative total interchange)
  - cellType: TEXT
    cellId: b6e5c617-47ae-44e4-abca-9298958b4418 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: The Plan
        - type: paragraph
          children:
            - text: "There are two paths to consider:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: Local BA is a net exporter of energy
                    - text: |-
                        
                        In this case, all electricity consumed locally comes from electricity generated locally, so the grid mix simply matches the local generation. This turns out to be a trivial sub-case of path #2
            - type: li
              children:
                - type: lic
                  children:
                    - bold: true
                      text: Local BA is a net importer of energy
                    - text: |-
                        
                        When the local BA is net importing energy, that energy might come from multiple other BAs, each of which has their own grid mix. Therefore, the grid mix of consumed electricity is a combination of local generation grid mix and imported generation grid mix
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "To get a true representation of the grid mix of local energy, we need to combine these pieces of data:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Demand, Net generation, and Total interchange for our LOCAL_BALANCING_AUTHORITY
            - type: li
              children:
                - type: lic
                  children:
                    - text: Interchange (quantity of imported energy) with each connected balancing authority
            - type: li
              children:
                - type: lic
                  children:
                    - text: Grid mix of imported energy from each connected balancing authority
  - cellType: CODE
    cellId: 52641306-7387-4983-b03a-851179863845 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Fetch data: Demand, Net generation, and Total interchange"
    config:
      source: |-
        # In the code below, we fetch the daily Demand (D), Net generation (NG), and Total interchange (TI) numbers for the LOCAL_BALANCING_AUTHORITY
        # You should see three rows for each date, one row each for TI, D, and NG.
        # You can spot check a given day to confirm that TI = NG - D
        demand_df = get_eia_net_demand_and_generation_timeseries([LOCAL_BALANCING_AUTHORITY])
        demand_df
  - cellType: CODE
    cellId: e93c29ca-6db0-4420-b4be-7b783d6bc4cd # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Fetch data: Interchange (import or export) with each connected BA"
    config:
      source: |-
        interchange_df = get_eia_interchange_timeseries([LOCAL_BALANCING_AUTHORITY])
        interchange_df
  - cellType: CODE
    cellId: 36483993-6c7d-4f1a-8a3c-b902d305429c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Combine: Energy consumed locally, broken down by source BA (local and imported)"
    config:
      source: |-
        # How much energy is both generated and consumed locally
        def get_energy_generated_and_consumed_locally(df):
            demand_stats = df.groupby("type-name")["Demand (MWh)"].sum()
            # If local demand is smaller than net (local) generation, that means: amount generated and used locally == Demand (net export)
            # If local generation is smaller than local demand, that means: amount generated and used locally == Net generation (net import)
            # Therefore, the amount generated and used locally is the minimum of these two
            try:
                return min(demand_stats["Demand"], demand_stats["Net generation"])
            except KeyError:
                # Sometimes for a particular timestamp we're missing demand or net generation. Be conservative and set it to zero
                print(f'Warning - either Demand or Net generation is missing from this timestamp. Values found for "type-name": {list(demand_stats.index)}')
                return 0


        energy_generated_and_used_locally = demand_df.groupby("timestamp").apply(
            get_energy_generated_and_consumed_locally
        )

        consumed_locally_column_name = "Power consumed locally (MWh)"

        # How much energy is imported and then used locally, grouped by the source BA (i.e. the BA which generated the energy)
        energy_imported_then_consumed_locally_by_source_ba = (
            interchange_df.groupby(["timestamp", "fromba"])[
                "Interchange to local BA (MWh)"
            ].sum()
            # We're only interested in data points where energy is coming *in* to the local BA, i.e. where net export is negative
            # Therefore, ignore positive net exports
            .apply(lambda interchange: max(interchange, 0))
        )

        # Combine these two together to get all energy used locally, grouped by the source BA (both local and connected)
        energy_consumed_locally_by_source_ba = pd.concat(
            [
                energy_imported_then_consumed_locally_by_source_ba.rename(
                    consumed_locally_column_name
                ).reset_index("fromba"),
                pd.DataFrame(
                    {
                        "fromba": LOCAL_BALANCING_AUTHORITY,
                        consumed_locally_column_name: energy_generated_and_used_locally,
                    }
                ),
            ]
        ).reset_index()
  - cellType: CHARTV2
    cellId: 8865af73-8fb4-4ae3-ab7f-f27185b6bd6e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Energy consumed locally, broken down by source BA
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: a84be1bf-fa1e-4b97-97d0-6a2da364421d
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              timeUnit: yearmonthdatehours
              dataFrameColumn: timestamp
            series:
              - id: a2e011f8-d5de-4eb4-b586-7701a5f2f3b5
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                dataFrameColumns:
                  - Power consumed locally (MWh)
                colorDataFrameColumn: fromba
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: energy_consumed_locally_by_source_ba
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        AVA: "#B279A2"
        PGE: "#FF9DA6"
        PJM: "#E45756"
        SCL: "#54A24B"
        TEX: "#F58518"
        AVRN: "#FF9DA6"
        BANC: "#9D755D"
        BPAT: "#4C78A8"
        CENT: "#4C78A8"
        CHPD: "#F58518"
        CISO: "#BAB0AC"
        DOPD: "#4C78A8"
        GCPD: "#E45756"
        GRID: "#F58518"
        IPCO: "#E45756"
        ISNE: "#4C78A8"
        LDWP: "#72B7B2"
        NEVP: "#54A24B"
        NWMT: "#EECA3B"
        NYIS: "#F58518"
        PACW: "#B279A2"
        PSEI: "#72B7B2"
        TPWR: "#EECA3B"
      resultVariable: filter_result_5
      outputResult: true
      displayType: CHART
      displayTableConfig:
        pageSize: 50
        height: null
        hideIcons: false
        hideIndex: false
        defaultSortColumn: null
        defaultSortIndexColumn: null
        defaultSortDirection: ASC
        conditionalFormatting: null
        calcs: null
        filters: []
        columnProperties:
          - originalName: Power consumed locally (MWh)
            renameTo: null
            size: 223
            wrapText: null
            displayFormat: null
          - originalName: fromba
            renameTo: null
            size: 94
            wrapText: null
            displayFormat: null
          - originalName: timestamp
            renameTo: null
            size: 156
            wrapText: null
            displayFormat: null
        columnOrdering: null
        customColumnOrdering: null
        pinnedColumns: null
        hiddenColumns: null
        pinIndexColumns: false
        showAggregations: false
        columnAggregations: null
  - cellType: CODE
    cellId: f3dd8cea-8f5f-46b4-882c-f0143a1f5f11 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: "Fetch data: Get grid mix for all source BAs (local and imported)"
    config:
      source: |-
        # Now that we know how much (if any) energy is imported by our local BA, and from which source BAs,
        # let's get a full breakdown of the grid mix (fuel types) for that imported energy

        # First, get a list of all source BAs: our local BA plus the ones we're importing from
        all_source_bas = energy_consumed_locally_by_source_ba["fromba"].unique().tolist()

        # Then, fetch the fuel type breakdowns for each of those BAs
        generation_types_by_ba = get_eia_grid_mix_timeseries(all_source_bas).rename(
            {"respondent": "fromba", "type-name": "generation_type"}, axis="columns"
        )
        print(len(generation_types_by_ba))
  - cellType: CODE
    cellId: d2f75142-a9b2-4df6-b51b-9daaf7c0bfd2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Combine it all together
    config:
      source: |-
        # Okay, we've fetched all the data we need, now it's time to combine it all together!

        # What follows is some heavy-lifting with the Pandas library to massage the data into the shape we want
        # Pandas docs: https://pandas.pydata.org/docs/
        # Pandas cheat sheet: https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf

        # The goal is to get a DataFrame of energy used at the local BA (in MWh), broken down by both
        #  * the BA that the energy came from, and 
        #  * the fuel type of that energy.
        # So we'll end up with one row for each combination of source BA and fuel type.

        # To get there, we need to combine the amount of imported energy from each source ba with grid mix for that source BA.
        # The general formula is:
        # Power consumed locally from a (BA, fuel type) combination = 
        #    total power consumed locally from this source BA * (fuel type as a % of source BA's generation)
        # fuel type as a % of source BA's generation = 
        #    (total generation at source BA) / (total generation for this fuel type at this BA)


        total_generation_by_source_ba = generation_types_by_ba.groupby(["timestamp", "fromba"])[
            "Generation (MWh)"
        ].sum()

        generation_types_by_ba_with_totals = generation_types_by_ba.join(
            total_generation_by_source_ba,
            how="left",
            on=["timestamp", "fromba"],
            rsuffix=" Total",
        )
        generation_types_by_ba_with_totals["Generation (% of BA generation)"] = (
            generation_types_by_ba_with_totals["Generation (MWh)"]
            / generation_types_by_ba_with_totals["Generation (MWh) Total"]
        )
        generation_types_by_ba_with_totals_and_source_ba_breakdown = generation_types_by_ba_with_totals.merge(
            energy_consumed_locally_by_source_ba.rename(
                {"Power consumed locally (MWh)": "Power consumed locally from source BA (MWh)"},
                axis="columns",
            ),
            on=["timestamp", "fromba"],
        )
        full_df_reindexed = (
            generation_types_by_ba_with_totals_and_source_ba_breakdown.set_index(
                ["timestamp", "fromba", "generation_type"]
            )
        )
        usage_by_ba_and_generation_type = (
            (
                full_df_reindexed["Power consumed locally from source BA (MWh)"]
                * full_df_reindexed["Generation (% of BA generation)"]
            )
            .rename("Usage (MWh)")
            .reset_index()
        )
        usage_by_ba_and_generation_type
  - cellType: CHARTV2
    cellId: 4dda5fba-7e82-4a9d-b1c0-4d0f8ee8e359 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Local electricity consumption grid mix, including grid mix of imported electricity
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: d2bad689-88ec-4e03-81d8-11758f0b7c69
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              dataFrameColumn: timestamp
            series:
              - id: e6dcca71-c67f-4e71-9fa8-c236bd380740
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorDataFrameColumn: generation_type
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: usage_by_ba_and_generation_type
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Coal: "#4C78A8"
        Wind: "#FF9DA6"
        Hydro: "#F58518"
        Other: "#54A24B"
        Solar: "#B279A2"
        Nuclear: "#72B7B2"
        Unknown: "#9D755D"
        Petroleum: "#EECA3B"
        Natural gas: "#E45756"
      resultVariable: chart_result
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: TEXT
    cellId: b448e830-a0b6-4388-a20f-343d2321f3b3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Coding Level 2-3 Deliverable
        - type: paragraph
          children:
            - text: Depending on your coding comfort level, just making it to the end of this notebook and following along the code might feel like enough!
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "If so, play around with the data and look for interesting findings. Ideas:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Is there a single other BA that is the primary exporter of energy to your BA, or is it a pretty even mix?
            - type: li
              children:
                - type: lic
                  children:
                    - text: Does your BA (or any BA!) ever switch between net import vs net export of energy?
            - type: li
              children:
                - type: lic
                  children:
                    - text: Does including the grid mix of imported energy change the primary fuel source in the grid mix of your local BA?
            - type: li
              children:
                - type: lic
                  children:
                    - text: ...?
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "If you're up for more of a challenge, take it one step further and modify or expand this notebook. Here are some ideas:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Find a way to convert from fuel type to CO2e emissions, and make a timeseries chart of total CO2e emissions or CO2e/kWh
            - type: li
              children:
                - type: lic
                  children:
                    - text: Fetch and plot the data as an hourly time series. Is there a time of day that has a higher proportion of renewable energy generation?
            - type: li
              children:
                - type: lic
                  children:
                    - text: Fetch longer time period of data and look for yearly or seasonal trends
            - type: li
              children:
                - type: lic
                  children:
                    - text: Find a non-US source of utility data and update the notebook to use that instead
            - type: li
              children:
                - type: lic
                  children:
                    - text: ...choose your own adventure!
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "In your Assignment submission on the Terra.do app:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Link to your copy of this notebook
            - type: li
              children:
                - type: lic
                  children:
                    - text: Write up a few sentences summarizing your interesting finding
  - cellType: MARKDOWN
    cellId: 6ddc2ca9-d43f-4d6f-aecd-70bc444dbc1c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Response to Assignment
    config:
      source: "# My Findings

        ### Simplify the Data

        After simplifying the data to categorize by 1) Local BA or External BAs and 2) Fossil Fuels, Renewables, or Nuclear/Other, the data visualization by simplified energy sources showed a rather steady energy usage from Renewables and Nuclear/Other energy sources. Fossil Fuels handled more of the variability in usage.


        ### Seasonal Trends

        The spikes in Fossil Fuel usage correlated to the summer months. I examined minimum, maximum, and average energy use of Fossil Fuels for these periods:\ 

        \ - Peak 2022

        \ - Peak 2023

        \ - Off-Peak 2022-23\ 

        \ - Off-Peak 2023-24


        ### Required Renewable Increase

        After noting the average of minimum off-peak fossil fuel usage, I calculated the necessary percentage increase in renewable energy to replace the baseline of fossil fuel energy usage.


        \ <!-- Updates made above: Change time horizon to 2 years -->

        \ <!-- Estimated Coding level Intermediate / 2.0 -->

        \  "
  - cellType: TEXT
    cellId: 6f27542f-ce22-4b09-be01-37193a5ad190 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: First, I simplified the data to add categorization for
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Local BA or External BA
            - type: li
              children:
                - type: lic
                  children:
                    - text: Fossil Fuels, Renewables, or Nuclear/Other
  - cellType: CODE
    cellId: d5fd8b71-4774-458d-9527-e633c6329cde # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Prepare simplified data set by adding categorization columns
    config:
      source: |-
        # Prepare simplified dataframe to add columns to categorize 
        # 1) BA as Local or External
        # 2) Energy Source as Renewable/Fossil/Other 
        usage_ba_type_simple = usage_by_ba_and_generation_type
        usage_ba_type_simple['ba'] = usage_ba_type_simple['fromba'].where(usage_ba_type_simple['fromba'] == 'NYIS', other='External BA')
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Wind', 'generation_renewable'] =  'Renewable'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Solar', 'generation_renewable'] =  'Renewable'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Hydro', 'generation_renewable'] =  'Renewable'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Petroleum', 'generation_renewable'] =  'Fossil Fuels'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Natural gas', 'generation_renewable'] =  'Fossil Fuels'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Coal', 'generation_renewable'] =  'Fossil Fuels'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Nuclear', 'generation_renewable'] =  'Nuclear/Other'
        usage_ba_type_simple.loc[usage_ba_type_simple['generation_type'] == 'Other', 'generation_renewable'] =  'Nuclear/Other'

        usage_ba_type_simple
  - cellType: TEXT
    cellId: 9301c22c-b934-483c-b772-e885e77e378a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: The data visualization by simplified energy sources shows mostly steady energy usage from Renewables and Nuclear/Other energy sources. Fossil Fuels handled more of the variability in usage.
  - cellType: CHARTV2
    cellId: 31d6c098-fa3b-43d1-b9aa-7f5e2ffb5ab4 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Energy from Renewable, Fossil Fuels, and Other Sources 
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: 85b07bb5-e332-4e27-8096-748fb7daba96
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              title: " 2022-2024"
              dataFrameColumn: timestamp
            series:
              - id: e17d2600-2a98-4936-9d57-c569feed5a44
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorDataFrameColumn: generation_renewable
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                legendTitle: Energy Sources
                line: true
                point: false
                interpolate: linear
                normalize: false
            dataFrame: usage_ba_type_simple
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Coal: "#4C78A8"
        Hmmm: "#F58518"
        NYIS: "#F58518"
        Wind: "#FF9DA6"
        "null": "#72B7B2"
        Hydro: "#F58518"
        Other: "#54A24B"
        Solar: "#B279A2"
        Nuclear: "#72B7B2"
        Petroleum: "#EECA3B"
        Renewable: "#E45756"
        External BA: "#4C78A8"
        Natural gas: "#E45756"
        Fossil Fuels: "#4C78A8"
        Nuclear/Other: "#F58518"
      resultVariable: chart_result_4
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: CHARTV2
    cellId: bdb87be6-f336-4bfa-a1d9-4a4202b5d1b2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Visualization of Energy from Fossil Fuels Only 
    config:
      height: null
      chartSpec:
        type: layered
        facet: {}
        layers:
          - id: 326a48f9-e849-4fbf-b29b-3e371eb0f656
            xAxis:
              type: datetime
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              title: 2022-2024
              dataFrameColumn: timestamp
            series:
              - id: 77d33473-251d-481b-87ec-fd2d111c709a
                type: area
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorOrder: ascending
                color:
                  type: static
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                line: true
                point: false
                normalize: false
            dataFrame: usage_ba_type_simple
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        Coal: "#4C78A8"
        "True": "#4C78A8"
        "null": "#F58518"
        Petroleum: "#E45756"
        Natural gas: "#F58518"
      resultVariable: chart_result_5
      outputResult: true
      displayType: CHART
      displayTableConfig:
        pageSize: 50
        height: null
        hideIcons: false
        hideIndex: false
        defaultSortColumn: null
        defaultSortIndexColumn: null
        defaultSortDirection: ASC
        conditionalFormatting: null
        calcs: null
        filters:
          - column: generation_renewable
            predicate:
              op: EQ
              arg: Fossil Fuels
            columnType: STRING
        columnProperties:
          - originalName: Usage (MWh)
            renameTo: null
            size: 150
            wrapText: null
            displayFormat: null
          - originalName: ba
            renameTo: null
            size: 65
            wrapText: null
            displayFormat: null
          - originalName: fromba
            renameTo: null
            size: 91
            wrapText: null
            displayFormat: null
          - originalName: generation_renewable
            renameTo: null
            size: 173
            wrapText: null
            displayFormat: null
          - originalName: generation_type
            renameTo: null
            size: 140
            wrapText: null
            displayFormat: null
          - originalName: row-index-0
            renameTo: null
            size: 46
            wrapText: null
            displayFormat: null
          - originalName: timestamp
            renameTo: null
            size: 156
            wrapText: null
            displayFormat: null
        columnOrdering: null
        customColumnOrdering: null
        pinnedColumns: null
        hiddenColumns: null
        pinIndexColumns: false
        showAggregations: false
        columnAggregations: null
  - cellType: CODE
    cellId: d6cdc1f5-bb9e-4a2e-9307-94522746b7ce # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Simplify Data Set to Usage by Date for Fossil Fuels Only 
    config:
      source: |-
        # Subset of data: Timestamp, Generation Source, Usage
        usage_simple = usage_ba_type_simple.groupby(['timestamp','generation_renewable']).sum('Usage(MWh)').reset_index()
        usage_simple['timestamp'] = pd.to_datetime(usage_simple['timestamp'])

        # Smaller subset of data: Timestamp and Usage for Fossil Fuels only
        usage_fossils_simple = usage_simple[usage_simple['generation_renewable'] == 'Fossil Fuels']
        usage_fossils_simple
  - cellType: TEXT
    cellId: 3681c8b4-e8d5-4399-9e33-512b685981c8 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: "The spikes in Fossil Fuel usage correlated to the summer months (since I am using New York as my test data). I prepared the minimum, maximum, and average energy use of Fossil Fuels for by period: "
  - cellType: CODE
    cellId: 2e3587c6-6298-4733-8b65-87928abe0272 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Prepare Summaries of Fossil Fuel Usage for Each Period )
    config:
      source: |
        # Specify dates for peak season
        peak1_end_date = pd.to_datetime('2022-09-30')
        peak2_start_date = pd.to_datetime('2023-06-01')
        peak2_end_date = pd.to_datetime('2023-09-30')
        #TODO - Let users input the dates for the seasons for their BA

        # Separate data into samples of peak and off-peak usage # TODO
        peak_usage_1 = usage_fossils_simple[(usage_fossils_simple['timestamp'] <= peak1_end_date)]
        offseason_usage_1 = usage_fossils_simple[(usage_fossils_simple['timestamp'] > peak1_end_date) & (usage_fossils_simple['timestamp'] < peak2_start_date)]
        peak_usage_2 = usage_fossils_simple[(usage_fossils_simple['timestamp'] >= peak2_start_date) & (usage_fossils_simple['timestamp'] <= peak2_end_date)]
        offseason_usage_2 = usage_fossils_simple[(usage_fossils_simple['timestamp'] > peak2_end_date)]

        # Create an array of dictionaries for summaries of peak and off-peak usage
        usage_by_seasons = [peak_usage_1, offseason_usage_1, peak_usage_2, offseason_usage_2]

        # For each season, prepare summary of label, average usage, min usage, max usage 
        def usage_summary(subset):
            if (pd.to_datetime(subset['timestamp'].min()) < peak1_end_date):
                season_label = 'Peak Season 2022'
            elif (pd.to_datetime(subset['timestamp'].min()) < peak2_start_date):
                season_label = 'Off-Peak 2022-23'
            elif (pd.to_datetime(subset['timestamp'].min()) < peak2_end_date):
                season_label = 'Peak Season 2023'
            else:
                season_label = 'Off-Peak 2023-24'

            return [
                    {
                        'Season': season_label,
                        'Usage Metric': 'Average',
                        'Usage (MWh)': round(subset['Usage (MWh)'].mean(), 2)
                    },
                    {
                        'Season': season_label,
                        'Usage Metric': 'Minimum',
                        'Usage (MWh)': round(subset['Usage (MWh)'].min(), 2)
                    },
                    {
                        'Season': season_label,
                        'Usage Metric': 'Maximum',
                        'Usage (MWh)': round(subset['Usage (MWh)'].max(), 2)
                    }
                ]

        usage_summaries = []
        for usage_by_season in usage_by_seasons:
            usage_summaries.extend(usage_summary(usage_by_season))
            
        # usage_summaries

        # Show data frame of fossil fuel Average, Min, Max
        summaries_df = pd.DataFrame(usage_summaries)
        summaries_df
  - cellType: TEXT
    cellId: ec93790e-796f-4e0b-a924-537aca362c06 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "Aside: Shout out to Todd for suggesting during the pairing session that I restructure the summaries_df in order to get my desired chart format.  🎉"
  - cellType: CHARTV2
    cellId: abaac615-eaff-4603-85d9-ae7972a0fbde # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Fossil Fuel Usage by Season (Average, Minimum, Maximum) 
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: a2712645-750e-41ed-a5f4-9e45cec4ee9c
            xAxis:
              type: string
              style:
                grid:
                  style: solid
                ticks: {}
                labels:
                  angle: 30
              title: " "
              dataFrameColumn: Season
            series:
              - id: d0a5f666-dd05-411b-a401-d4a0b7c89fdc
                type: bar
                axis:
                  type: number
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: sum
                dataFrameColumns:
                  - Usage (MWh)
                colorDataFrameColumn: Usage Metric
                colorOrder: ascending
                color:
                  type: series
                  colorsBySeriesValues: {}
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                barWidth: 1
                orientation: vertical
                layout: grouped
            dataFrame: summaries_df
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      colorMappings:
        max: "#F58518"
        min: "#E45756"
        Average: "#4C78A8"
        Maximum: "#F58518"
        Minimum: "#E45756"
        average: "#4C78A8"
      resultVariable: chart_result_8
      outputResult: false
      displayType: CHART
      displayTableConfig: null
  - cellType: CODE
    cellId: 2c0c8e8b-4a29-4179-afa4-38f947dfd4ae # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Simplify Data Set to Usage for Renewables Only and get Avg 
    config:
      source: |-
        # Subset of data: Timestamp and Usage for Renewables only
        usage_renewable_simple = usage_simple[usage_simple['generation_renewable'] == 'Renewable']
        usage_renewable_simple.head()
  - cellType: CODE
    cellId: f1b95079-3b94-4ab4-805c-85ae8a59f48d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Simple Analysis for Replading Minimum Fossil Fuels with Renewable Sources
    config:
      source: |
        # Calculate average of minimum Off Peak and Peak usage
        offpeak_fossil_min = int(np.mean([
            summaries_df[(summaries_df['Season'] == 'Off-Peak 2022-23') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            summaries_df[(summaries_df['Season'] == 'Off-Peak 2023-24') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            ]))

        peak_fossil_min = int(np.mean([
            summaries_df[(summaries_df['Season'] == 'Peak Season 2022') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            summaries_df[(summaries_df['Season'] == 'Peak Season 2023') & (summaries_df['Usage Metric'] == 'Minimum')]['Usage (MWh)'].values[0],
            ]))


        # Calculate average of all Renewables usage
        usage_renewable_avg = int(usage_renewable_simple['Usage (MWh)'].mean())

        # Calculate percentage increase needed in Renewables (rough)
        replace_fossils_LOE = int((offpeak_fossil_min / usage_renewable_avg)*100)

        # Improve formatting # TODO
        if LOCAL_BALANCING_AUTHORITY == "NYIS":
            BA_display = "New York BA"
        else: 
            BA_display = "Specified BA"

        CRED = '\033[93m'
        CEND = '\033[0m'    

        print(BA_display, "average of minimum monthly energy from fossil fuels:")
        print("  Off-peak: {:,} MWh".format(offpeak_fossil_min))
        print("  Peak: {:,} MWh".format(peak_fossil_min))
        print(f"\n{BA_display} currently supplies an average of {usage_renewable_avg:,} MWh per month from renewable sources.")
        print(f"\nTo replace the baseline fossil fuel usage, {BA_display} must increase energy supply from \nrenewable sources by {CRED}{replace_fossils_LOE}%{CEND}.")
appLayout:
  visibleMetadataFields:
    - NAME
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
    - LAST_RUN
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
  fullWidth: false
  tabs:
    - name: Tab 1
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 5fe5fb9a-8be4-4502-ac19-d8fce1587c70
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 0cf67e28-86c0-42a3-8441-ffb4d080488f
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d4e7074b-8536-4116-a8c8-4f5845767fe3
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 02a85dc4-f927-4829-971c-c1ba67c60c4e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ec707cd4-5e3d-418e-b7aa-fa10cd09f38c
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 558b3c8d-f318-4b34-a419-dc8f87b1ecaf
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 99012238-fa67-4ff4-9df5-c9c70a12ca3b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3cc95149-ef86-489a-859a-aa8ac8160b73
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: bcfe1141-91ff-4fea-83c6-8c7114a60fd9
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b6e5c617-47ae-44e4-abca-9298958b4418
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 52641306-7387-4983-b03a-851179863845
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e93c29ca-6db0-4420-b4be-7b783d6bc4cd
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 8865af73-8fb4-4ae3-ab7f-f27185b6bd6e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d2f75142-a9b2-4df6-b51b-9daaf7c0bfd2
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 4dda5fba-7e82-4a9d-b1c0-4d0f8ee8e359
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b448e830-a0b6-4388-a20f-343d2321f3b3
                  sharedFilterId: null
                  height: null
                  showLabel: true
sharedFilters: []
